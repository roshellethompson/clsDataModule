'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
'
Namespace CheckServices
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CheckServicesSoap", [Namespace]:="http://fldevez/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(RelatedEnd)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(StructuralObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityKeyMember()))>  _
    Partial Public Class CheckServices
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AuthorizeCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthorizeBillPayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BackoutLogEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BackoutProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMakerIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReviewXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReviewedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReviewedXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestHeavyMetalPrepaidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HeavyMetalPrePaidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OLDHeavyMetalPrePaidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestFoxProOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserSaltOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HMCustomerFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestHeavyMetalPositiveCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HeavyMetalPositiveCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestHMRPreRegistrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HMRPreRegistrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HMRHeavyMetalRegistrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HeavyMetalCardInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private testOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPasswordHashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.clsDataModule.My.MySettings.Default.clsDataModule_CheckServices_CheckServices
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AuthorizeCheckCompleted As AuthorizeCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthorizeBillPayCompleted As AuthorizeBillPayCompletedEventHandler
        
        '''<remarks/>
        Public Event BackoutLogEventCompleted As BackoutLogEventCompletedEventHandler
        
        '''<remarks/>
        Public Event BackoutProcessCompleted As BackoutProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMakerIDCompleted As GetMakerIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReviewCompleted As CheckReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReviewXMLCompleted As CheckReviewXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReviewedCompleted As CheckReviewedCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReviewedXMLCompleted As CheckReviewedXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event TestHeavyMetalPrepaidCompleted As TestHeavyMetalPrepaidCompletedEventHandler
        
        '''<remarks/>
        Public Event HeavyMetalPrePaidCompleted As HeavyMetalPrePaidCompletedEventHandler
        
        '''<remarks/>
        Public Event OLDHeavyMetalPrePaidCompleted As OLDHeavyMetalPrePaidCompletedEventHandler
        
        '''<remarks/>
        Public Event TestFoxProCompleted As TestFoxProCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserSaltCompleted As UpdateUserSaltCompletedEventHandler
        
        '''<remarks/>
        Public Event HMCustomerFlowCompleted As HMCustomerFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event TestHeavyMetalPositiveCheckCompleted As TestHeavyMetalPositiveCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event HeavyMetalPositiveCheckCompleted As HeavyMetalPositiveCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event TestHMRPreRegistrationCompleted As TestHMRPreRegistrationCompletedEventHandler
        
        '''<remarks/>
        Public Event HMRPreRegistrationCompleted As HMRPreRegistrationCompletedEventHandler
        
        '''<remarks/>
        Public Event HMRHeavyMetalRegistrationCompleted As HMRHeavyMetalRegistrationCompletedEventHandler
        
        '''<remarks/>
        Public Event HeavyMetalCardInquiryCompleted As HeavyMetalCardInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event testCompleted As testCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPasswordHashCompleted As GetPasswordHashCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerDataCompleted As GetCustomerDataCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/AuthorizeCheck", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthorizeCheck( _
                    ByVal iCustomerID As Integer,  _
                    ByVal sCheckGuaranteeCode As String,  _
                    ByVal sCheckApprovalCode As String,  _
                    ByVal sBlockID As String,  _
                    ByVal iTransactionNumber As Integer,  _
                    ByVal sCheckNumber As String,  _
                    ByVal checkAmount As Decimal,  _
                    ByVal sOPCode As String,  _
                    ByVal iCardID As Integer,  _
                    ByVal sProviderID As String,  _
                    ByRef sOutput1 As String,  _
                    ByRef sOutput2 As String,  _
                    ByRef sOutput3 As String,  _
                    ByRef iRC1 As Integer,  _
                    ByRef sRC2 As String,  _
                    ByRef iRC3 As Integer) As Boolean
            Dim results() As Object = Me.Invoke("AuthorizeCheck", New Object() {iCustomerID, sCheckGuaranteeCode, sCheckApprovalCode, sBlockID, iTransactionNumber, sCheckNumber, checkAmount, sOPCode, iCardID, sProviderID, sOutput1, sOutput2, sOutput3, iRC1, sRC2, iRC3})
            sOutput1 = CType(results(1),String)
            sOutput2 = CType(results(2),String)
            sOutput3 = CType(results(3),String)
            iRC1 = CType(results(4),Integer)
            sRC2 = CType(results(5),String)
            iRC3 = CType(results(6),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthorizeCheckAsync( _
                    ByVal iCustomerID As Integer,  _
                    ByVal sCheckGuaranteeCode As String,  _
                    ByVal sCheckApprovalCode As String,  _
                    ByVal sBlockID As String,  _
                    ByVal iTransactionNumber As Integer,  _
                    ByVal sCheckNumber As String,  _
                    ByVal checkAmount As Decimal,  _
                    ByVal sOPCode As String,  _
                    ByVal iCardID As Integer,  _
                    ByVal sProviderID As String,  _
                    ByVal sOutput1 As String,  _
                    ByVal sOutput2 As String,  _
                    ByVal sOutput3 As String,  _
                    ByVal iRC1 As Integer,  _
                    ByVal sRC2 As String,  _
                    ByVal iRC3 As Integer)
            Me.AuthorizeCheckAsync(iCustomerID, sCheckGuaranteeCode, sCheckApprovalCode, sBlockID, iTransactionNumber, sCheckNumber, checkAmount, sOPCode, iCardID, sProviderID, sOutput1, sOutput2, sOutput3, iRC1, sRC2, iRC3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthorizeCheckAsync( _
                    ByVal iCustomerID As Integer,  _
                    ByVal sCheckGuaranteeCode As String,  _
                    ByVal sCheckApprovalCode As String,  _
                    ByVal sBlockID As String,  _
                    ByVal iTransactionNumber As Integer,  _
                    ByVal sCheckNumber As String,  _
                    ByVal checkAmount As Decimal,  _
                    ByVal sOPCode As String,  _
                    ByVal iCardID As Integer,  _
                    ByVal sProviderID As String,  _
                    ByVal sOutput1 As String,  _
                    ByVal sOutput2 As String,  _
                    ByVal sOutput3 As String,  _
                    ByVal iRC1 As Integer,  _
                    ByVal sRC2 As String,  _
                    ByVal iRC3 As Integer,  _
                    ByVal userState As Object)
            If (Me.AuthorizeCheckOperationCompleted Is Nothing) Then
                Me.AuthorizeCheckOperationCompleted = AddressOf Me.OnAuthorizeCheckOperationCompleted
            End If
            Me.InvokeAsync("AuthorizeCheck", New Object() {iCustomerID, sCheckGuaranteeCode, sCheckApprovalCode, sBlockID, iTransactionNumber, sCheckNumber, checkAmount, sOPCode, iCardID, sProviderID, sOutput1, sOutput2, sOutput3, iRC1, sRC2, iRC3}, Me.AuthorizeCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthorizeCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthorizeCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthorizeCheckCompleted(Me, New AuthorizeCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/AuthorizeBillPay", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthorizeBillPay(ByVal iCustomerID As Integer, ByVal dAmount As Decimal, ByVal iCardID As Integer, ByVal sBlockID As String, ByVal iTransactionNumber As Integer, ByVal sOPCode As String, ByRef iRC As Integer, ByRef sRC2 As String, ByRef iRC3 As Integer, ByRef dOutput1 As Decimal, ByRef dOutput2 As Decimal, ByRef dOutput3 As Decimal, ByRef iOutput4 As Integer) As Boolean
            Dim results() As Object = Me.Invoke("AuthorizeBillPay", New Object() {iCustomerID, dAmount, iCardID, sBlockID, iTransactionNumber, sOPCode, iRC, sRC2, iRC3, dOutput1, dOutput2, dOutput3, iOutput4})
            iRC = CType(results(1),Integer)
            sRC2 = CType(results(2),String)
            iRC3 = CType(results(3),Integer)
            dOutput1 = CType(results(4),Decimal)
            dOutput2 = CType(results(5),Decimal)
            dOutput3 = CType(results(6),Decimal)
            iOutput4 = CType(results(7),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthorizeBillPayAsync(ByVal iCustomerID As Integer, ByVal dAmount As Decimal, ByVal iCardID As Integer, ByVal sBlockID As String, ByVal iTransactionNumber As Integer, ByVal sOPCode As String, ByVal iRC As Integer, ByVal sRC2 As String, ByVal iRC3 As Integer, ByVal dOutput1 As Decimal, ByVal dOutput2 As Decimal, ByVal dOutput3 As Decimal, ByVal iOutput4 As Integer)
            Me.AuthorizeBillPayAsync(iCustomerID, dAmount, iCardID, sBlockID, iTransactionNumber, sOPCode, iRC, sRC2, iRC3, dOutput1, dOutput2, dOutput3, iOutput4, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthorizeBillPayAsync(ByVal iCustomerID As Integer, ByVal dAmount As Decimal, ByVal iCardID As Integer, ByVal sBlockID As String, ByVal iTransactionNumber As Integer, ByVal sOPCode As String, ByVal iRC As Integer, ByVal sRC2 As String, ByVal iRC3 As Integer, ByVal dOutput1 As Decimal, ByVal dOutput2 As Decimal, ByVal dOutput3 As Decimal, ByVal iOutput4 As Integer, ByVal userState As Object)
            If (Me.AuthorizeBillPayOperationCompleted Is Nothing) Then
                Me.AuthorizeBillPayOperationCompleted = AddressOf Me.OnAuthorizeBillPayOperationCompleted
            End If
            Me.InvokeAsync("AuthorizeBillPay", New Object() {iCustomerID, dAmount, iCardID, sBlockID, iTransactionNumber, sOPCode, iRC, sRC2, iRC3, dOutput1, dOutput2, dOutput3, iOutput4}, Me.AuthorizeBillPayOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthorizeBillPayOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthorizeBillPayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthorizeBillPayCompleted(Me, New AuthorizeBillPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/BackoutLogEvent", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BackoutLogEvent(ByRef iBackoutID As Integer, ByVal sKeyName As String, ByVal sKeyValue As String, ByVal sTable As String, ByVal sDataBase As String, ByVal iOperationCode As Integer, ByVal sFieldName As String, ByRef iRC As Integer) As Boolean
            Dim results() As Object = Me.Invoke("BackoutLogEvent", New Object() {iBackoutID, sKeyName, sKeyValue, sTable, sDataBase, iOperationCode, sFieldName, iRC})
            iBackoutID = CType(results(1),Integer)
            iRC = CType(results(2),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BackoutLogEventAsync(ByVal iBackoutID As Integer, ByVal sKeyName As String, ByVal sKeyValue As String, ByVal sTable As String, ByVal sDataBase As String, ByVal iOperationCode As Integer, ByVal sFieldName As String, ByVal iRC As Integer)
            Me.BackoutLogEventAsync(iBackoutID, sKeyName, sKeyValue, sTable, sDataBase, iOperationCode, sFieldName, iRC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BackoutLogEventAsync(ByVal iBackoutID As Integer, ByVal sKeyName As String, ByVal sKeyValue As String, ByVal sTable As String, ByVal sDataBase As String, ByVal iOperationCode As Integer, ByVal sFieldName As String, ByVal iRC As Integer, ByVal userState As Object)
            If (Me.BackoutLogEventOperationCompleted Is Nothing) Then
                Me.BackoutLogEventOperationCompleted = AddressOf Me.OnBackoutLogEventOperationCompleted
            End If
            Me.InvokeAsync("BackoutLogEvent", New Object() {iBackoutID, sKeyName, sKeyValue, sTable, sDataBase, iOperationCode, sFieldName, iRC}, Me.BackoutLogEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnBackoutLogEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.BackoutLogEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BackoutLogEventCompleted(Me, New BackoutLogEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/BackoutProcess", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BackoutProcess(ByRef iBackoutID As Integer, ByRef iRC As Integer, ByRef iRC2 As Integer) As Boolean
            Dim results() As Object = Me.Invoke("BackoutProcess", New Object() {iBackoutID, iRC, iRC2})
            iBackoutID = CType(results(1),Integer)
            iRC = CType(results(2),Integer)
            iRC2 = CType(results(3),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BackoutProcessAsync(ByVal iBackoutID As Integer, ByVal iRC As Integer, ByVal iRC2 As Integer)
            Me.BackoutProcessAsync(iBackoutID, iRC, iRC2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BackoutProcessAsync(ByVal iBackoutID As Integer, ByVal iRC As Integer, ByVal iRC2 As Integer, ByVal userState As Object)
            If (Me.BackoutProcessOperationCompleted Is Nothing) Then
                Me.BackoutProcessOperationCompleted = AddressOf Me.OnBackoutProcessOperationCompleted
            End If
            Me.InvokeAsync("BackoutProcess", New Object() {iBackoutID, iRC, iRC2}, Me.BackoutProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnBackoutProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.BackoutProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BackoutProcessCompleted(Me, New BackoutProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/GetMakerID", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMakerID(ByRef sAcctNum As String, ByRef sRoutingNum As String, ByRef sCheckNum As String, ByRef sCompanyName As String) As Integer
            Dim results() As Object = Me.Invoke("GetMakerID", New Object() {sAcctNum, sRoutingNum, sCheckNum, sCompanyName})
            sAcctNum = CType(results(1),String)
            sRoutingNum = CType(results(2),String)
            sCheckNum = CType(results(3),String)
            sCompanyName = CType(results(4),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMakerIDAsync(ByVal sAcctNum As String, ByVal sRoutingNum As String, ByVal sCheckNum As String, ByVal sCompanyName As String)
            Me.GetMakerIDAsync(sAcctNum, sRoutingNum, sCheckNum, sCompanyName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMakerIDAsync(ByVal sAcctNum As String, ByVal sRoutingNum As String, ByVal sCheckNum As String, ByVal sCompanyName As String, ByVal userState As Object)
            If (Me.GetMakerIDOperationCompleted Is Nothing) Then
                Me.GetMakerIDOperationCompleted = AddressOf Me.OnGetMakerIDOperationCompleted
            End If
            Me.InvokeAsync("GetMakerID", New Object() {sAcctNum, sRoutingNum, sCheckNum, sCompanyName}, Me.GetMakerIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMakerIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMakerIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMakerIDCompleted(Me, New GetMakerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/CheckReview", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReview(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal routingNumber As String, ByVal accountNumber As String, ByVal firstName As String, ByVal lastName As String, ByVal checkAmount As String, ByVal checkDate As Date, ByVal CompanyName As String, ByVal isSigned As Boolean, ByVal FingerMatch As Char, ByVal sCheckNum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckReview", New Object() {CustomerID, transactionNumber, blockID, workstationID, routingNumber, accountNumber, firstName, lastName, checkAmount, checkDate, CompanyName, isSigned, FingerMatch, sCheckNum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReviewAsync(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal routingNumber As String, ByVal accountNumber As String, ByVal firstName As String, ByVal lastName As String, ByVal checkAmount As String, ByVal checkDate As Date, ByVal CompanyName As String, ByVal isSigned As Boolean, ByVal FingerMatch As Char, ByVal sCheckNum As String)
            Me.CheckReviewAsync(CustomerID, transactionNumber, blockID, workstationID, routingNumber, accountNumber, firstName, lastName, checkAmount, checkDate, CompanyName, isSigned, FingerMatch, sCheckNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReviewAsync(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal routingNumber As String, ByVal accountNumber As String, ByVal firstName As String, ByVal lastName As String, ByVal checkAmount As String, ByVal checkDate As Date, ByVal CompanyName As String, ByVal isSigned As Boolean, ByVal FingerMatch As Char, ByVal sCheckNum As String, ByVal userState As Object)
            If (Me.CheckReviewOperationCompleted Is Nothing) Then
                Me.CheckReviewOperationCompleted = AddressOf Me.OnCheckReviewOperationCompleted
            End If
            Me.InvokeAsync("CheckReview", New Object() {CustomerID, transactionNumber, blockID, workstationID, routingNumber, accountNumber, firstName, lastName, checkAmount, checkDate, CompanyName, isSigned, FingerMatch, sCheckNum}, Me.CheckReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReviewCompleted(Me, New CheckReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/CheckReviewXML", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReviewXML(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal routingNumber As String, ByVal accountNumber As String, ByVal firstName As String, ByVal lastName As String, ByVal checkAmount As String, ByVal checkDate As Date, ByVal CompanyName As String, ByVal isSigned As Boolean, ByVal FingerMatch As Char, ByVal sCheckNum As String) As String
            Dim results() As Object = Me.Invoke("CheckReviewXML", New Object() {CustomerID, transactionNumber, blockID, workstationID, routingNumber, accountNumber, firstName, lastName, checkAmount, checkDate, CompanyName, isSigned, FingerMatch, sCheckNum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReviewXMLAsync(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal routingNumber As String, ByVal accountNumber As String, ByVal firstName As String, ByVal lastName As String, ByVal checkAmount As String, ByVal checkDate As Date, ByVal CompanyName As String, ByVal isSigned As Boolean, ByVal FingerMatch As Char, ByVal sCheckNum As String)
            Me.CheckReviewXMLAsync(CustomerID, transactionNumber, blockID, workstationID, routingNumber, accountNumber, firstName, lastName, checkAmount, checkDate, CompanyName, isSigned, FingerMatch, sCheckNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReviewXMLAsync(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal routingNumber As String, ByVal accountNumber As String, ByVal firstName As String, ByVal lastName As String, ByVal checkAmount As String, ByVal checkDate As Date, ByVal CompanyName As String, ByVal isSigned As Boolean, ByVal FingerMatch As Char, ByVal sCheckNum As String, ByVal userState As Object)
            If (Me.CheckReviewXMLOperationCompleted Is Nothing) Then
                Me.CheckReviewXMLOperationCompleted = AddressOf Me.OnCheckReviewXMLOperationCompleted
            End If
            Me.InvokeAsync("CheckReviewXML", New Object() {CustomerID, transactionNumber, blockID, workstationID, routingNumber, accountNumber, firstName, lastName, checkAmount, checkDate, CompanyName, isSigned, FingerMatch, sCheckNum}, Me.CheckReviewXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReviewXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReviewXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReviewXMLCompleted(Me, New CheckReviewXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/CheckReviewed", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReviewed(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckReviewed", New Object() {CustomerID, transactionNumber, blockID, workstationID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReviewedAsync(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String)
            Me.CheckReviewedAsync(CustomerID, transactionNumber, blockID, workstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReviewedAsync(ByVal CustomerID As Integer, ByVal transactionNumber As Integer, ByVal blockID As String, ByVal workstationID As String, ByVal userState As Object)
            If (Me.CheckReviewedOperationCompleted Is Nothing) Then
                Me.CheckReviewedOperationCompleted = AddressOf Me.OnCheckReviewedOperationCompleted
            End If
            Me.InvokeAsync("CheckReviewed", New Object() {CustomerID, transactionNumber, blockID, workstationID}, Me.CheckReviewedOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReviewedOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReviewedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReviewedCompleted(Me, New CheckReviewedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/CheckReviewedXML", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReviewedXML(ByVal CustomerID As Integer, ByVal blockID As String, ByVal transactionNumber As Integer, ByVal workstationID As String) As String
            Dim results() As Object = Me.Invoke("CheckReviewedXML", New Object() {CustomerID, blockID, transactionNumber, workstationID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReviewedXMLAsync(ByVal CustomerID As Integer, ByVal blockID As String, ByVal transactionNumber As Integer, ByVal workstationID As String)
            Me.CheckReviewedXMLAsync(CustomerID, blockID, transactionNumber, workstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReviewedXMLAsync(ByVal CustomerID As Integer, ByVal blockID As String, ByVal transactionNumber As Integer, ByVal workstationID As String, ByVal userState As Object)
            If (Me.CheckReviewedXMLOperationCompleted Is Nothing) Then
                Me.CheckReviewedXMLOperationCompleted = AddressOf Me.OnCheckReviewedXMLOperationCompleted
            End If
            Me.InvokeAsync("CheckReviewedXML", New Object() {CustomerID, blockID, transactionNumber, workstationID}, Me.CheckReviewedXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReviewedXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReviewedXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReviewedXMLCompleted(Me, New CheckReviewedXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/TestHeavyMetalPrepaid", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestHeavyMetalPrepaid(ByVal PhotoID As String, ByVal State As String, ByVal Country As String, ByVal strDOB As String, ByVal FName As String, ByVal MName As String, ByVal LName As String, ByVal NetCard As Decimal, ByVal TranCode As String, ByVal ProviderID As String, ByVal OutCardBal As Decimal, ByVal OutAvailBal As Decimal, ByVal barcode As Integer, ByVal ReceiptNo As Integer, ByVal WorkstationID As Integer) As ReturnCodes
            Dim results() As Object = Me.Invoke("TestHeavyMetalPrepaid", New Object() {PhotoID, State, Country, strDOB, FName, MName, LName, NetCard, TranCode, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, WorkstationID})
            Return CType(results(0),ReturnCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestHeavyMetalPrepaidAsync(ByVal PhotoID As String, ByVal State As String, ByVal Country As String, ByVal strDOB As String, ByVal FName As String, ByVal MName As String, ByVal LName As String, ByVal NetCard As Decimal, ByVal TranCode As String, ByVal ProviderID As String, ByVal OutCardBal As Decimal, ByVal OutAvailBal As Decimal, ByVal barcode As Integer, ByVal ReceiptNo As Integer, ByVal WorkstationID As Integer)
            Me.TestHeavyMetalPrepaidAsync(PhotoID, State, Country, strDOB, FName, MName, LName, NetCard, TranCode, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestHeavyMetalPrepaidAsync( _
                    ByVal PhotoID As String,  _
                    ByVal State As String,  _
                    ByVal Country As String,  _
                    ByVal strDOB As String,  _
                    ByVal FName As String,  _
                    ByVal MName As String,  _
                    ByVal LName As String,  _
                    ByVal NetCard As Decimal,  _
                    ByVal TranCode As String,  _
                    ByVal ProviderID As String,  _
                    ByVal OutCardBal As Decimal,  _
                    ByVal OutAvailBal As Decimal,  _
                    ByVal barcode As Integer,  _
                    ByVal ReceiptNo As Integer,  _
                    ByVal WorkstationID As Integer,  _
                    ByVal userState As Object)
            If (Me.TestHeavyMetalPrepaidOperationCompleted Is Nothing) Then
                Me.TestHeavyMetalPrepaidOperationCompleted = AddressOf Me.OnTestHeavyMetalPrepaidOperationCompleted
            End If
            Me.InvokeAsync("TestHeavyMetalPrepaid", New Object() {PhotoID, State, Country, strDOB, FName, MName, LName, NetCard, TranCode, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, WorkstationID}, Me.TestHeavyMetalPrepaidOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestHeavyMetalPrepaidOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestHeavyMetalPrepaidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestHeavyMetalPrepaidCompleted(Me, New TestHeavyMetalPrepaidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/HeavyMetalPrePaid", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HeavyMetalPrePaid(ByVal SDcust As CustomerPhotoIDs, ByVal NetCard As Decimal, ByVal TranCode As String, ByVal ProviderID As String, ByVal OutCardBal As Decimal, ByVal OutAvailBal As Decimal, ByVal barcode As Integer, ByVal ReceiptNo As Integer, ByVal WorkstationID As Integer) As ReturnCodes
            Dim results() As Object = Me.Invoke("HeavyMetalPrePaid", New Object() {SDcust, NetCard, TranCode, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, WorkstationID})
            Return CType(results(0),ReturnCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HeavyMetalPrePaidAsync(ByVal SDcust As CustomerPhotoIDs, ByVal NetCard As Decimal, ByVal TranCode As String, ByVal ProviderID As String, ByVal OutCardBal As Decimal, ByVal OutAvailBal As Decimal, ByVal barcode As Integer, ByVal ReceiptNo As Integer, ByVal WorkstationID As Integer)
            Me.HeavyMetalPrePaidAsync(SDcust, NetCard, TranCode, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HeavyMetalPrePaidAsync(ByVal SDcust As CustomerPhotoIDs, ByVal NetCard As Decimal, ByVal TranCode As String, ByVal ProviderID As String, ByVal OutCardBal As Decimal, ByVal OutAvailBal As Decimal, ByVal barcode As Integer, ByVal ReceiptNo As Integer, ByVal WorkstationID As Integer, ByVal userState As Object)
            If (Me.HeavyMetalPrePaidOperationCompleted Is Nothing) Then
                Me.HeavyMetalPrePaidOperationCompleted = AddressOf Me.OnHeavyMetalPrePaidOperationCompleted
            End If
            Me.InvokeAsync("HeavyMetalPrePaid", New Object() {SDcust, NetCard, TranCode, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, WorkstationID}, Me.HeavyMetalPrePaidOperationCompleted, userState)
        End Sub
        
        Private Sub OnHeavyMetalPrePaidOperationCompleted(ByVal arg As Object)
            If (Not (Me.HeavyMetalPrePaidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HeavyMetalPrePaidCompleted(Me, New HeavyMetalPrePaidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/OLDHeavyMetalPrePaid", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OLDHeavyMetalPrePaid( _
                    ByVal NetCard As Decimal,  _
                    ByVal TranCode As String,  _
                    ByVal PhotoID As String,  _
                    ByVal State As String,  _
                    ByVal strDOB As String,  _
                    ByVal ProviderID As String,  _
                    ByVal OutCardBal As Decimal,  _
                    ByVal OutAvailBal As Decimal,  _
                    ByVal barcode As Integer,  _
                    ByVal ReceiptNo As Integer,  _
                    ByVal FName As String,  _
                    ByVal MName As String,  _
                    ByVal LName As String,  _
                    ByVal RC As Integer,  _
                    ByVal RCCard As String,  _
                    ByVal WorkstationID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("OLDHeavyMetalPrePaid", New Object() {NetCard, TranCode, PhotoID, State, strDOB, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, FName, MName, LName, RC, RCCard, WorkstationID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OLDHeavyMetalPrePaidAsync( _
                    ByVal NetCard As Decimal,  _
                    ByVal TranCode As String,  _
                    ByVal PhotoID As String,  _
                    ByVal State As String,  _
                    ByVal strDOB As String,  _
                    ByVal ProviderID As String,  _
                    ByVal OutCardBal As Decimal,  _
                    ByVal OutAvailBal As Decimal,  _
                    ByVal barcode As Integer,  _
                    ByVal ReceiptNo As Integer,  _
                    ByVal FName As String,  _
                    ByVal MName As String,  _
                    ByVal LName As String,  _
                    ByVal RC As Integer,  _
                    ByVal RCCard As String,  _
                    ByVal WorkstationID As Integer)
            Me.OLDHeavyMetalPrePaidAsync(NetCard, TranCode, PhotoID, State, strDOB, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, FName, MName, LName, RC, RCCard, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OLDHeavyMetalPrePaidAsync( _
                    ByVal NetCard As Decimal,  _
                    ByVal TranCode As String,  _
                    ByVal PhotoID As String,  _
                    ByVal State As String,  _
                    ByVal strDOB As String,  _
                    ByVal ProviderID As String,  _
                    ByVal OutCardBal As Decimal,  _
                    ByVal OutAvailBal As Decimal,  _
                    ByVal barcode As Integer,  _
                    ByVal ReceiptNo As Integer,  _
                    ByVal FName As String,  _
                    ByVal MName As String,  _
                    ByVal LName As String,  _
                    ByVal RC As Integer,  _
                    ByVal RCCard As String,  _
                    ByVal WorkstationID As Integer,  _
                    ByVal userState As Object)
            If (Me.OLDHeavyMetalPrePaidOperationCompleted Is Nothing) Then
                Me.OLDHeavyMetalPrePaidOperationCompleted = AddressOf Me.OnOLDHeavyMetalPrePaidOperationCompleted
            End If
            Me.InvokeAsync("OLDHeavyMetalPrePaid", New Object() {NetCard, TranCode, PhotoID, State, strDOB, ProviderID, OutCardBal, OutAvailBal, barcode, ReceiptNo, FName, MName, LName, RC, RCCard, WorkstationID}, Me.OLDHeavyMetalPrePaidOperationCompleted, userState)
        End Sub
        
        Private Sub OnOLDHeavyMetalPrePaidOperationCompleted(ByVal arg As Object)
            If (Not (Me.OLDHeavyMetalPrePaidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OLDHeavyMetalPrePaidCompleted(Me, New OLDHeavyMetalPrePaidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/TestFoxPro", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestFoxPro(ByVal arrTest() As String, ByRef Test As String) As Boolean
            Dim results() As Object = Me.Invoke("TestFoxPro", New Object() {arrTest, Test})
            Test = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestFoxProAsync(ByVal arrTest() As String, ByVal Test As String)
            Me.TestFoxProAsync(arrTest, Test, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestFoxProAsync(ByVal arrTest() As String, ByVal Test As String, ByVal userState As Object)
            If (Me.TestFoxProOperationCompleted Is Nothing) Then
                Me.TestFoxProOperationCompleted = AddressOf Me.OnTestFoxProOperationCompleted
            End If
            Me.InvokeAsync("TestFoxPro", New Object() {arrTest, Test}, Me.TestFoxProOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestFoxProOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestFoxProCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestFoxProCompleted(Me, New TestFoxProCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/UpdateUserSalt", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserSalt(ByVal customerID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UpdateUserSalt", New Object() {customerID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserSaltAsync(ByVal customerID As Integer)
            Me.UpdateUserSaltAsync(customerID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserSaltAsync(ByVal customerID As Integer, ByVal userState As Object)
            If (Me.UpdateUserSaltOperationCompleted Is Nothing) Then
                Me.UpdateUserSaltOperationCompleted = AddressOf Me.OnUpdateUserSaltOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserSalt", New Object() {customerID}, Me.UpdateUserSaltOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserSaltOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserSaltCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserSaltCompleted(Me, New UpdateUserSaltCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/HMCustomerFlow", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HMCustomerFlow(ByVal Pan As String, ByVal deviceID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("HMCustomerFlow", New Object() {Pan, deviceID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HMCustomerFlowAsync(ByVal Pan As String, ByVal deviceID As Integer)
            Me.HMCustomerFlowAsync(Pan, deviceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HMCustomerFlowAsync(ByVal Pan As String, ByVal deviceID As Integer, ByVal userState As Object)
            If (Me.HMCustomerFlowOperationCompleted Is Nothing) Then
                Me.HMCustomerFlowOperationCompleted = AddressOf Me.OnHMCustomerFlowOperationCompleted
            End If
            Me.InvokeAsync("HMCustomerFlow", New Object() {Pan, deviceID}, Me.HMCustomerFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnHMCustomerFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.HMCustomerFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HMCustomerFlowCompleted(Me, New HMCustomerFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/TestHeavyMetalPositiveCheck", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestHeavyMetalPositiveCheck(ByVal IDNum As String, ByVal dob As String, ByVal state As String, ByVal country As String, ByVal CheckAmount As String, ByVal routingNum As String, ByVal acctNum As String, ByVal checkNum As String, ByVal checkDate As String, ByVal Type As String, ByVal SyTran As String, ByVal PrintCode As String, ByVal ProviderID As String, ByVal iDeviceID As Integer) As ReturnCodes
            Dim results() As Object = Me.Invoke("TestHeavyMetalPositiveCheck", New Object() {IDNum, dob, state, country, CheckAmount, routingNum, acctNum, checkNum, checkDate, Type, SyTran, PrintCode, ProviderID, iDeviceID})
            Return CType(results(0),ReturnCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestHeavyMetalPositiveCheckAsync(ByVal IDNum As String, ByVal dob As String, ByVal state As String, ByVal country As String, ByVal CheckAmount As String, ByVal routingNum As String, ByVal acctNum As String, ByVal checkNum As String, ByVal checkDate As String, ByVal Type As String, ByVal SyTran As String, ByVal PrintCode As String, ByVal ProviderID As String, ByVal iDeviceID As Integer)
            Me.TestHeavyMetalPositiveCheckAsync(IDNum, dob, state, country, CheckAmount, routingNum, acctNum, checkNum, checkDate, Type, SyTran, PrintCode, ProviderID, iDeviceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestHeavyMetalPositiveCheckAsync(ByVal IDNum As String, ByVal dob As String, ByVal state As String, ByVal country As String, ByVal CheckAmount As String, ByVal routingNum As String, ByVal acctNum As String, ByVal checkNum As String, ByVal checkDate As String, ByVal Type As String, ByVal SyTran As String, ByVal PrintCode As String, ByVal ProviderID As String, ByVal iDeviceID As Integer, ByVal userState As Object)
            If (Me.TestHeavyMetalPositiveCheckOperationCompleted Is Nothing) Then
                Me.TestHeavyMetalPositiveCheckOperationCompleted = AddressOf Me.OnTestHeavyMetalPositiveCheckOperationCompleted
            End If
            Me.InvokeAsync("TestHeavyMetalPositiveCheck", New Object() {IDNum, dob, state, country, CheckAmount, routingNum, acctNum, checkNum, checkDate, Type, SyTran, PrintCode, ProviderID, iDeviceID}, Me.TestHeavyMetalPositiveCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestHeavyMetalPositiveCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestHeavyMetalPositiveCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestHeavyMetalPositiveCheckCompleted(Me, New TestHeavyMetalPositiveCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/HeavyMetalPositiveCheck", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HeavyMetalPositiveCheck(ByVal sdCust As CustomerPhotoIDs, ByVal sdCheck As Checks, ByVal stype As String, ByVal sSyTran As String, ByVal sPrintCode As String, ByVal sProviderID As String, ByVal iDeviceID As Integer) As ReturnCodes
            Dim results() As Object = Me.Invoke("HeavyMetalPositiveCheck", New Object() {sdCust, sdCheck, stype, sSyTran, sPrintCode, sProviderID, iDeviceID})
            Return CType(results(0),ReturnCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HeavyMetalPositiveCheckAsync(ByVal sdCust As CustomerPhotoIDs, ByVal sdCheck As Checks, ByVal stype As String, ByVal sSyTran As String, ByVal sPrintCode As String, ByVal sProviderID As String, ByVal iDeviceID As Integer)
            Me.HeavyMetalPositiveCheckAsync(sdCust, sdCheck, stype, sSyTran, sPrintCode, sProviderID, iDeviceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HeavyMetalPositiveCheckAsync(ByVal sdCust As CustomerPhotoIDs, ByVal sdCheck As Checks, ByVal stype As String, ByVal sSyTran As String, ByVal sPrintCode As String, ByVal sProviderID As String, ByVal iDeviceID As Integer, ByVal userState As Object)
            If (Me.HeavyMetalPositiveCheckOperationCompleted Is Nothing) Then
                Me.HeavyMetalPositiveCheckOperationCompleted = AddressOf Me.OnHeavyMetalPositiveCheckOperationCompleted
            End If
            Me.InvokeAsync("HeavyMetalPositiveCheck", New Object() {sdCust, sdCheck, stype, sSyTran, sPrintCode, sProviderID, iDeviceID}, Me.HeavyMetalPositiveCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnHeavyMetalPositiveCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.HeavyMetalPositiveCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HeavyMetalPositiveCheckCompleted(Me, New HeavyMetalPositiveCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/TestHMRPreRegistration", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestHMRPreRegistration( _
                    ByVal Barcode As String,  _
                    ByVal photoID As String,  _
                    ByVal dob As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal country As String,  _
                    ByVal zip As String,  _
                    ByVal EAddress As String,  _
                    ByVal ProviderID As Integer,  _
                    ByVal SSN As String,  _
                    ByVal Mobile As String,  _
                    ByVal Test As Integer,  _
                    ByVal ScanID As Integer,  _
                    ByVal WorkstationID As Integer) As ReturnCodes
            Dim results() As Object = Me.Invoke("TestHMRPreRegistration", New Object() {Barcode, photoID, dob, firstName, middleName, lastName, address1, address2, city, state, country, zip, EAddress, ProviderID, SSN, Mobile, Test, ScanID, WorkstationID})
            Return CType(results(0),ReturnCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestHMRPreRegistrationAsync( _
                    ByVal Barcode As String,  _
                    ByVal photoID As String,  _
                    ByVal dob As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal country As String,  _
                    ByVal zip As String,  _
                    ByVal EAddress As String,  _
                    ByVal ProviderID As Integer,  _
                    ByVal SSN As String,  _
                    ByVal Mobile As String,  _
                    ByVal Test As Integer,  _
                    ByVal ScanID As Integer,  _
                    ByVal WorkstationID As Integer)
            Me.TestHMRPreRegistrationAsync(Barcode, photoID, dob, firstName, middleName, lastName, address1, address2, city, state, country, zip, EAddress, ProviderID, SSN, Mobile, Test, ScanID, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestHMRPreRegistrationAsync( _
                    ByVal Barcode As String,  _
                    ByVal photoID As String,  _
                    ByVal dob As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal country As String,  _
                    ByVal zip As String,  _
                    ByVal EAddress As String,  _
                    ByVal ProviderID As Integer,  _
                    ByVal SSN As String,  _
                    ByVal Mobile As String,  _
                    ByVal Test As Integer,  _
                    ByVal ScanID As Integer,  _
                    ByVal WorkstationID As Integer,  _
                    ByVal userState As Object)
            If (Me.TestHMRPreRegistrationOperationCompleted Is Nothing) Then
                Me.TestHMRPreRegistrationOperationCompleted = AddressOf Me.OnTestHMRPreRegistrationOperationCompleted
            End If
            Me.InvokeAsync("TestHMRPreRegistration", New Object() {Barcode, photoID, dob, firstName, middleName, lastName, address1, address2, city, state, country, zip, EAddress, ProviderID, SSN, Mobile, Test, ScanID, WorkstationID}, Me.TestHMRPreRegistrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestHMRPreRegistrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestHMRPreRegistrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestHMRPreRegistrationCompleted(Me, New TestHMRPreRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/HMRPreRegistration", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HMRPreRegistration(ByVal Barcode As String, ByVal SDcust As CustomerPhotoIDs, ByVal ProviderID As Integer, ByVal TestSSN As String, ByVal TestMobileNo As String, ByVal Test As Integer, ByVal ScanID As Integer, ByVal WorkstationID As Integer) As ReturnCodes
            Dim results() As Object = Me.Invoke("HMRPreRegistration", New Object() {Barcode, SDcust, ProviderID, TestSSN, TestMobileNo, Test, ScanID, WorkstationID})
            Return CType(results(0),ReturnCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HMRPreRegistrationAsync(ByVal Barcode As String, ByVal SDcust As CustomerPhotoIDs, ByVal ProviderID As Integer, ByVal TestSSN As String, ByVal TestMobileNo As String, ByVal Test As Integer, ByVal ScanID As Integer, ByVal WorkstationID As Integer)
            Me.HMRPreRegistrationAsync(Barcode, SDcust, ProviderID, TestSSN, TestMobileNo, Test, ScanID, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HMRPreRegistrationAsync(ByVal Barcode As String, ByVal SDcust As CustomerPhotoIDs, ByVal ProviderID As Integer, ByVal TestSSN As String, ByVal TestMobileNo As String, ByVal Test As Integer, ByVal ScanID As Integer, ByVal WorkstationID As Integer, ByVal userState As Object)
            If (Me.HMRPreRegistrationOperationCompleted Is Nothing) Then
                Me.HMRPreRegistrationOperationCompleted = AddressOf Me.OnHMRPreRegistrationOperationCompleted
            End If
            Me.InvokeAsync("HMRPreRegistration", New Object() {Barcode, SDcust, ProviderID, TestSSN, TestMobileNo, Test, ScanID, WorkstationID}, Me.HMRPreRegistrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnHMRPreRegistrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.HMRPreRegistrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HMRPreRegistrationCompleted(Me, New HMRPreRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/HMRHeavyMetalRegistration", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HMRHeavyMetalRegistration( _
                    ByRef photoID As String,  _
                    ByRef strDob As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByRef state As String,  _
                    ByVal zip As String,  _
                    ByVal eaddress As String,  _
                    ByVal providerID As String,  _
                    ByVal deviceID As Integer,  _
                    ByVal TestSSN As String,  _
                    ByVal TestMobileNo As String,  _
                    ByVal Test As Integer,  _
                    ByVal PAN As String,  _
                    ByRef RCCard As String) As String
            Dim results() As Object = Me.Invoke("HMRHeavyMetalRegistration", New Object() {photoID, strDob, firstName, middleName, lastName, address1, address2, city, state, zip, eaddress, providerID, deviceID, TestSSN, TestMobileNo, Test, PAN, RCCard})
            photoID = CType(results(1),String)
            strDob = CType(results(2),String)
            state = CType(results(3),String)
            RCCard = CType(results(4),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HMRHeavyMetalRegistrationAsync( _
                    ByVal photoID As String,  _
                    ByVal strDob As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal zip As String,  _
                    ByVal eaddress As String,  _
                    ByVal providerID As String,  _
                    ByVal deviceID As Integer,  _
                    ByVal TestSSN As String,  _
                    ByVal TestMobileNo As String,  _
                    ByVal Test As Integer,  _
                    ByVal PAN As String,  _
                    ByVal RCCard As String)
            Me.HMRHeavyMetalRegistrationAsync(photoID, strDob, firstName, middleName, lastName, address1, address2, city, state, zip, eaddress, providerID, deviceID, TestSSN, TestMobileNo, Test, PAN, RCCard, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HMRHeavyMetalRegistrationAsync( _
                    ByVal photoID As String,  _
                    ByVal strDob As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal zip As String,  _
                    ByVal eaddress As String,  _
                    ByVal providerID As String,  _
                    ByVal deviceID As Integer,  _
                    ByVal TestSSN As String,  _
                    ByVal TestMobileNo As String,  _
                    ByVal Test As Integer,  _
                    ByVal PAN As String,  _
                    ByVal RCCard As String,  _
                    ByVal userState As Object)
            If (Me.HMRHeavyMetalRegistrationOperationCompleted Is Nothing) Then
                Me.HMRHeavyMetalRegistrationOperationCompleted = AddressOf Me.OnHMRHeavyMetalRegistrationOperationCompleted
            End If
            Me.InvokeAsync("HMRHeavyMetalRegistration", New Object() {photoID, strDob, firstName, middleName, lastName, address1, address2, city, state, zip, eaddress, providerID, deviceID, TestSSN, TestMobileNo, Test, PAN, RCCard}, Me.HMRHeavyMetalRegistrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnHMRHeavyMetalRegistrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.HMRHeavyMetalRegistrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HMRHeavyMetalRegistrationCompleted(Me, New HMRHeavyMetalRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/HeavyMetalCardInquiry", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HeavyMetalCardInquiry(ByVal photoID As String, ByVal state As String, ByVal country As String, ByVal dob As Date, ByVal providerID As String, ByRef output1 As String, ByRef output2 As String, ByRef RC As Integer, ByRef RC1 As String) As Boolean
            Dim results() As Object = Me.Invoke("HeavyMetalCardInquiry", New Object() {photoID, state, country, dob, providerID, output1, output2, RC, RC1})
            output1 = CType(results(1),String)
            output2 = CType(results(2),String)
            RC = CType(results(3),Integer)
            RC1 = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HeavyMetalCardInquiryAsync(ByVal photoID As String, ByVal state As String, ByVal country As String, ByVal dob As Date, ByVal providerID As String, ByVal output1 As String, ByVal output2 As String, ByVal RC As Integer, ByVal RC1 As String)
            Me.HeavyMetalCardInquiryAsync(photoID, state, country, dob, providerID, output1, output2, RC, RC1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HeavyMetalCardInquiryAsync(ByVal photoID As String, ByVal state As String, ByVal country As String, ByVal dob As Date, ByVal providerID As String, ByVal output1 As String, ByVal output2 As String, ByVal RC As Integer, ByVal RC1 As String, ByVal userState As Object)
            If (Me.HeavyMetalCardInquiryOperationCompleted Is Nothing) Then
                Me.HeavyMetalCardInquiryOperationCompleted = AddressOf Me.OnHeavyMetalCardInquiryOperationCompleted
            End If
            Me.InvokeAsync("HeavyMetalCardInquiry", New Object() {photoID, state, country, dob, providerID, output1, output2, RC, RC1}, Me.HeavyMetalCardInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnHeavyMetalCardInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.HeavyMetalCardInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HeavyMetalCardInquiryCompleted(Me, New HeavyMetalCardInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/test", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function test(ByVal iCustId As Integer, ByVal message As String, ByVal Subject As String) As String
            Dim results() As Object = Me.Invoke("test", New Object() {iCustId, message, Subject})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub testAsync(ByVal iCustId As Integer, ByVal message As String, ByVal Subject As String)
            Me.testAsync(iCustId, message, Subject, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testAsync(ByVal iCustId As Integer, ByVal message As String, ByVal Subject As String, ByVal userState As Object)
            If (Me.testOperationCompleted Is Nothing) Then
                Me.testOperationCompleted = AddressOf Me.OntestOperationCompleted
            End If
            Me.InvokeAsync("test", New Object() {iCustId, message, Subject}, Me.testOperationCompleted, userState)
        End Sub
        
        Private Sub OntestOperationCompleted(ByVal arg As Object)
            If (Not (Me.testCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent testCompleted(Me, New testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/GetPasswordHash", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPasswordHash(ByVal strPass As String, ByVal userSalt As String) As String
            Dim results() As Object = Me.Invoke("GetPasswordHash", New Object() {strPass, userSalt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPasswordHashAsync(ByVal strPass As String, ByVal userSalt As String)
            Me.GetPasswordHashAsync(strPass, userSalt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPasswordHashAsync(ByVal strPass As String, ByVal userSalt As String, ByVal userState As Object)
            If (Me.GetPasswordHashOperationCompleted Is Nothing) Then
                Me.GetPasswordHashOperationCompleted = AddressOf Me.OnGetPasswordHashOperationCompleted
            End If
            Me.InvokeAsync("GetPasswordHash", New Object() {strPass, userSalt}, Me.GetPasswordHashOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPasswordHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPasswordHashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPasswordHashCompleted(Me, New GetPasswordHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fldevez/GetCustomerData", RequestNamespace:="http://fldevez/", ResponseNamespace:="http://fldevez/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerData(ByVal CustomerID As Integer, ByVal IDNum As String, ByVal DOB As String, ByVal State As String, ByVal RoutingNum As Integer, ByVal AcctNum As Integer, ByVal CheckNum As Integer, ByVal netCheckAmt As Decimal, ByVal WorkstationID As Integer, ByRef RC1 As Integer, ByRef RC2 As Integer, ByRef RC3 As Integer) As Checks
            Dim results() As Object = Me.Invoke("GetCustomerData", New Object() {CustomerID, IDNum, DOB, State, RoutingNum, AcctNum, CheckNum, netCheckAmt, WorkstationID, RC1, RC2, RC3})
            RC1 = CType(results(1),Integer)
            RC2 = CType(results(2),Integer)
            RC3 = CType(results(3),Integer)
            Return CType(results(0),Checks)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataAsync(ByVal CustomerID As Integer, ByVal IDNum As String, ByVal DOB As String, ByVal State As String, ByVal RoutingNum As Integer, ByVal AcctNum As Integer, ByVal CheckNum As Integer, ByVal netCheckAmt As Decimal, ByVal WorkstationID As Integer, ByVal RC1 As Integer, ByVal RC2 As Integer, ByVal RC3 As Integer)
            Me.GetCustomerDataAsync(CustomerID, IDNum, DOB, State, RoutingNum, AcctNum, CheckNum, netCheckAmt, WorkstationID, RC1, RC2, RC3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataAsync(ByVal CustomerID As Integer, ByVal IDNum As String, ByVal DOB As String, ByVal State As String, ByVal RoutingNum As Integer, ByVal AcctNum As Integer, ByVal CheckNum As Integer, ByVal netCheckAmt As Decimal, ByVal WorkstationID As Integer, ByVal RC1 As Integer, ByVal RC2 As Integer, ByVal RC3 As Integer, ByVal userState As Object)
            If (Me.GetCustomerDataOperationCompleted Is Nothing) Then
                Me.GetCustomerDataOperationCompleted = AddressOf Me.OnGetCustomerDataOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerData", New Object() {CustomerID, IDNum, DOB, State, RoutingNum, AcctNum, CheckNum, netCheckAmt, WorkstationID, RC1, RC2, RC3}, Me.GetCustomerDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerDataCompleted(Me, New GetCustomerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class ReturnCodes
        
        Private rcField As String
        
        Private infoField As String
        
        '''<remarks/>
        Public Property RC() As String
            Get
                Return Me.rcField
            End Get
            Set
                Me.rcField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property info() As String
            Get
                Return Me.infoField
            End Get
            Set
                Me.infoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityReference)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityReferenceOfCustomer)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityReferenceOfAccounts)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public MustInherit Class RelatedEnd
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityReferenceOfCustomer)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityReferenceOfAccounts)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public MustInherit Class EntityReference
        Inherits RelatedEnd
        
        Private entityKeyField As EntityKey
        
        '''<remarks/>
        Public Property EntityKey() As EntityKey
            Get
                Return Me.entityKeyField
            End Get
            Set
                Me.entityKeyField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class EntityKey
        
        Private entitySetNameField As String
        
        Private entityContainerNameField As String
        
        Private entityKeyValuesField() As EntityKeyMember
        
        '''<remarks/>
        Public Property EntitySetName() As String
            Get
                Return Me.entitySetNameField
            End Get
            Set
                Me.entitySetNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityContainerName() As String
            Get
                Return Me.entityContainerNameField
            End Get
            Set
                Me.entityContainerNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityKeyValues() As EntityKeyMember()
            Get
                Return Me.entityKeyValuesField
            End Get
            Set
                Me.entityKeyValuesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class EntityKeyMember
        
        Private keyField As String
        
        Private valueField As Object
        
        '''<remarks/>
        Public Property Key() As String
            Get
                Return Me.keyField
            End Get
            Set
                Me.keyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As Object
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class EntityReferenceOfCustomer
        Inherits EntityReference
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class EntityReferenceOfAccounts
        Inherits EntityReference
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class TimeSpan
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(EntityObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Checks)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(CustomerPhotoIDs)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public MustInherit Class StructuralObject
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(Checks)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(CustomerPhotoIDs)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public MustInherit Class EntityObject
        Inherits StructuralObject
        
        Private entityKeyField As EntityKey
        
        '''<remarks/>
        Public Property EntityKey() As EntityKey
            Get
                Return Me.entityKeyField
            End Get
            Set
                Me.entityKeyField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class Checks
        Inherits EntityObject
        
        Private checkIDField As Integer
        
        Private actNbrField As String
        
        Private makerIDField As System.Nullable(Of Integer)
        
        Private dateField As System.Nullable(Of Date)
        
        Private checkNbrField As String
        
        Private amountField As System.Nullable(Of Decimal)
        
        Private statusField As System.Nullable(Of Short)
        
        Private createDateField As System.Nullable(Of Date)
        
        Private createUserField As String
        
        Private modifiedDateField As System.Nullable(Of Date)
        
        Private modifiedUserField As String
        
        Private lockDateField As System.Nullable(Of Date)
        
        Private lockUserField As String
        
        Private transaction_IDField As System.Nullable(Of Integer)
        
        Private routing_NumberField As String
        
        Private checkGuaranteeCodeField As String
        
        Private check_Approval_CodeField As String
        
        Private block_IDField As String
        
        Private check_FeeField As System.Nullable(Of Decimal)
        
        Private cashed_DateField As System.Nullable(Of Date)
        
        Private cashed_TimeField As TimeSpan
        
        Private workstation_IDField As String
        
        Private positiveCheckFlagField As String
        
        Private positiveCashedFlagField As String
        
        Private printCheckField As String
        
        Private netCashField As System.Nullable(Of Decimal)
        
        Private netCardField As System.Nullable(Of Decimal)
        
        Private netCheckField As System.Nullable(Of Decimal)
        
        Private makerNameField As String
        
        Private accountsReferenceField As EntityReferenceOfAccounts
        
        Private customerReferenceField As EntityReferenceOfCustomer
        
        '''<remarks/>
        Public Property CheckID() As Integer
            Get
                Return Me.checkIDField
            End Get
            Set
                Me.checkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActNbr() As String
            Get
                Return Me.actNbrField
            End Get
            Set
                Me.actNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property MakerID() As System.Nullable(Of Integer)
            Get
                Return Me.makerIDField
            End Get
            Set
                Me.makerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property [Date]() As System.Nullable(Of Date)
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckNbr() As String
            Get
                Return Me.checkNbrField
            End Get
            Set
                Me.checkNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Amount() As System.Nullable(Of Decimal)
            Get
                Return Me.amountField
            End Get
            Set
                Me.amountField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Status() As System.Nullable(Of Short)
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CreateDate() As System.Nullable(Of Date)
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateUser() As String
            Get
                Return Me.createUserField
            End Get
            Set
                Me.createUserField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property ModifiedDate() As System.Nullable(Of Date)
            Get
                Return Me.modifiedDateField
            End Get
            Set
                Me.modifiedDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModifiedUser() As String
            Get
                Return Me.modifiedUserField
            End Get
            Set
                Me.modifiedUserField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property LockDate() As System.Nullable(Of Date)
            Get
                Return Me.lockDateField
            End Get
            Set
                Me.lockDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LockUser() As String
            Get
                Return Me.lockUserField
            End Get
            Set
                Me.lockUserField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Transaction_ID() As System.Nullable(Of Integer)
            Get
                Return Me.transaction_IDField
            End Get
            Set
                Me.transaction_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Routing_Number() As String
            Get
                Return Me.routing_NumberField
            End Get
            Set
                Me.routing_NumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckGuaranteeCode() As String
            Get
                Return Me.checkGuaranteeCodeField
            End Get
            Set
                Me.checkGuaranteeCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Check_Approval_Code() As String
            Get
                Return Me.check_Approval_CodeField
            End Get
            Set
                Me.check_Approval_CodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Block_ID() As String
            Get
                Return Me.block_IDField
            End Get
            Set
                Me.block_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Check_Fee() As System.Nullable(Of Decimal)
            Get
                Return Me.check_FeeField
            End Get
            Set
                Me.check_FeeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Cashed_Date() As System.Nullable(Of Date)
            Get
                Return Me.cashed_DateField
            End Get
            Set
                Me.cashed_DateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Cashed_Time() As TimeSpan
            Get
                Return Me.cashed_TimeField
            End Get
            Set
                Me.cashed_TimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Workstation_ID() As String
            Get
                Return Me.workstation_IDField
            End Get
            Set
                Me.workstation_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PositiveCheckFlag() As String
            Get
                Return Me.positiveCheckFlagField
            End Get
            Set
                Me.positiveCheckFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PositiveCashedFlag() As String
            Get
                Return Me.positiveCashedFlagField
            End Get
            Set
                Me.positiveCashedFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PrintCheck() As String
            Get
                Return Me.printCheckField
            End Get
            Set
                Me.printCheckField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property NetCash() As System.Nullable(Of Decimal)
            Get
                Return Me.netCashField
            End Get
            Set
                Me.netCashField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property NetCard() As System.Nullable(Of Decimal)
            Get
                Return Me.netCardField
            End Get
            Set
                Me.netCardField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property NetCheck() As System.Nullable(Of Decimal)
            Get
                Return Me.netCheckField
            End Get
            Set
                Me.netCheckField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MakerName() As String
            Get
                Return Me.makerNameField
            End Get
            Set
                Me.makerNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountsReference() As EntityReferenceOfAccounts
            Get
                Return Me.accountsReferenceField
            End Get
            Set
                Me.accountsReferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerReference() As EntityReferenceOfCustomer
            Get
                Return Me.customerReferenceField
            End Get
            Set
                Me.customerReferenceField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://fldevez/")>  _
    Partial Public Class CustomerPhotoIDs
        Inherits EntityObject
        
        Private idField As Integer
        
        Private customerIDField As System.Nullable(Of Integer)
        
        Private nameFField As String
        
        Private nameMField As String
        
        Private nameLField As String
        
        Private nameSField As String
        
        Private addressL1Field As String
        
        Private addressL2Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private zipField As String
        
        Private dLNbrField As String
        
        Private dLIssueDateField As System.Nullable(Of Date)
        
        Private dLExpDateField As System.Nullable(Of Date)
        
        Private heightField As String
        
        Private weightField As String
        
        Private eyeColorField As String
        
        Private hairColorField As String
        
        Private dOBField As System.Nullable(Of Date)
        
        Private createDateField As System.Nullable(Of Date)
        
        Private iDTypeNoField As System.Nullable(Of Integer)
        
        Private sexField As String
        
        Private statusField As String
        
        Private photoIDScanField As System.Nullable(Of Integer)
        
        Private barcodeField As String
        
        Private emailField As String
        
        Private anonymousField As Boolean
        
        Private scan_IDField As System.Nullable(Of Integer)
        
        Private iDErrorField As System.Nullable(Of Integer)
        
        Private countryField As String
        
        '''<remarks/>
        Public Property ID() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CustomerID() As System.Nullable(Of Integer)
            Get
                Return Me.customerIDField
            End Get
            Set
                Me.customerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameF() As String
            Get
                Return Me.nameFField
            End Get
            Set
                Me.nameFField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameM() As String
            Get
                Return Me.nameMField
            End Get
            Set
                Me.nameMField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameL() As String
            Get
                Return Me.nameLField
            End Get
            Set
                Me.nameLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameS() As String
            Get
                Return Me.nameSField
            End Get
            Set
                Me.nameSField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressL1() As String
            Get
                Return Me.addressL1Field
            End Get
            Set
                Me.addressL1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressL2() As String
            Get
                Return Me.addressL2Field
            End Get
            Set
                Me.addressL2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Zip() As String
            Get
                Return Me.zipField
            End Get
            Set
                Me.zipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DLNbr() As String
            Get
                Return Me.dLNbrField
            End Get
            Set
                Me.dLNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DLIssueDate() As System.Nullable(Of Date)
            Get
                Return Me.dLIssueDateField
            End Get
            Set
                Me.dLIssueDateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DLExpDate() As System.Nullable(Of Date)
            Get
                Return Me.dLExpDateField
            End Get
            Set
                Me.dLExpDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Height() As String
            Get
                Return Me.heightField
            End Get
            Set
                Me.heightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Weight() As String
            Get
                Return Me.weightField
            End Get
            Set
                Me.weightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EyeColor() As String
            Get
                Return Me.eyeColorField
            End Get
            Set
                Me.eyeColorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HairColor() As String
            Get
                Return Me.hairColorField
            End Get
            Set
                Me.hairColorField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOB() As System.Nullable(Of Date)
            Get
                Return Me.dOBField
            End Get
            Set
                Me.dOBField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CreateDate() As System.Nullable(Of Date)
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property IDTypeNo() As System.Nullable(Of Integer)
            Get
                Return Me.iDTypeNoField
            End Get
            Set
                Me.iDTypeNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Sex() As String
            Get
                Return Me.sexField
            End Get
            Set
                Me.sexField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property PhotoIDScan() As System.Nullable(Of Integer)
            Get
                Return Me.photoIDScanField
            End Get
            Set
                Me.photoIDScanField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Barcode() As String
            Get
                Return Me.barcodeField
            End Get
            Set
                Me.barcodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Anonymous() As Boolean
            Get
                Return Me.anonymousField
            End Get
            Set
                Me.anonymousField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Scan_ID() As System.Nullable(Of Integer)
            Get
                Return Me.scan_IDField
            End Get
            Set
                Me.scan_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property IDError() As System.Nullable(Of Integer)
            Get
                Return Me.iDErrorField
            End Get
            Set
                Me.iDErrorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AuthorizeCheckCompletedEventHandler(ByVal sender As Object, ByVal e As AuthorizeCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthorizeCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sOutput1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sOutput2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sOutput3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC1() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sRC2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC3() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AuthorizeBillPayCompletedEventHandler(ByVal sender As Object, ByVal e As AuthorizeBillPayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthorizeBillPayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sRC2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC3() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dOutput1() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dOutput2() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dOutput3() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iOutput4() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub BackoutLogEventCompletedEventHandler(ByVal sender As Object, ByVal e As BackoutLogEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BackoutLogEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iBackoutID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub BackoutProcessCompletedEventHandler(ByVal sender As Object, ByVal e As BackoutProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BackoutProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iBackoutID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iRC2() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetMakerIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetMakerIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMakerIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sAcctNum() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sRoutingNum() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sCheckNum() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sCompanyName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CheckReviewCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CheckReviewXMLCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReviewXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReviewXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CheckReviewedCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReviewedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReviewedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CheckReviewedXMLCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReviewedXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReviewedXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub TestHeavyMetalPrepaidCompletedEventHandler(ByVal sender As Object, ByVal e As TestHeavyMetalPrepaidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestHeavyMetalPrepaidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ReturnCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ReturnCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HeavyMetalPrePaidCompletedEventHandler(ByVal sender As Object, ByVal e As HeavyMetalPrePaidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HeavyMetalPrePaidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ReturnCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ReturnCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub OLDHeavyMetalPrePaidCompletedEventHandler(ByVal sender As Object, ByVal e As OLDHeavyMetalPrePaidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OLDHeavyMetalPrePaidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub TestFoxProCompletedEventHandler(ByVal sender As Object, ByVal e As TestFoxProCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestFoxProCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Test() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub UpdateUserSaltCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserSaltCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserSaltCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HMCustomerFlowCompletedEventHandler(ByVal sender As Object, ByVal e As HMCustomerFlowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HMCustomerFlowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub TestHeavyMetalPositiveCheckCompletedEventHandler(ByVal sender As Object, ByVal e As TestHeavyMetalPositiveCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestHeavyMetalPositiveCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ReturnCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ReturnCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HeavyMetalPositiveCheckCompletedEventHandler(ByVal sender As Object, ByVal e As HeavyMetalPositiveCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HeavyMetalPositiveCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ReturnCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ReturnCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub TestHMRPreRegistrationCompletedEventHandler(ByVal sender As Object, ByVal e As TestHMRPreRegistrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestHMRPreRegistrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ReturnCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ReturnCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HMRPreRegistrationCompletedEventHandler(ByVal sender As Object, ByVal e As HMRPreRegistrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HMRPreRegistrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ReturnCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ReturnCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HMRHeavyMetalRegistrationCompletedEventHandler(ByVal sender As Object, ByVal e As HMRHeavyMetalRegistrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HMRHeavyMetalRegistrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property photoID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strDob() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property state() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RCCard() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HeavyMetalCardInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As HeavyMetalCardInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HeavyMetalCardInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property output1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property output2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub testCompletedEventHandler(ByVal sender As Object, ByVal e As testCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class testCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetPasswordHashCompletedEventHandler(ByVal sender As Object, ByVal e As GetPasswordHashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPasswordHashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetCustomerDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Checks
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Checks)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC1() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC2() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC3() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
    End Class
End Namespace
