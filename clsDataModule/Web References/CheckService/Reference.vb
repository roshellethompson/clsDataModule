'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace CheckService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ICheckServicebinding", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.SoapIncludeAttribute(GetType(TObjName))>  _
    Partial Public Class ICheckServiceservice
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AuthorizeCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateCustomerIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateTransactionNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCustomerDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveJournalDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLanguageArrayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLanguageArrayStrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureRegIDDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureRegIDImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureRegIDDataAndImgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureRegCustImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostAndCheckEZCashQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureCustImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureCustIDImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureCustTxnImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadEquinoxScreenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckScannerCmdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ScanBillStubOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NCRCheckReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NCRCheckVerificationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogBackoutEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessBackoutEventsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParseMICROperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReverseCheckImagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthenticateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.clsDataModule.My.MySettings.Default.clsDataModule_ICheckService_ICheckServiceservice
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AuthorizeCheckCompleted As AuthorizeCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCustomerIDCompleted As CreateCustomerIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateTransactionNumberCompleted As CreateTransactionNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCustomerDataCompleted As SaveCustomerDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveJournalDataCompleted As SaveJournalDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLanguageArrayCompleted As GetLanguageArrayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLanguageArrayStrCompleted As GetLanguageArrayStrCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureRegIDDataCompleted As CaptureRegIDDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureRegIDImageCompleted As CaptureRegIDImageCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureRegIDDataAndImgCompleted As CaptureRegIDDataAndImgCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureRegCustImageCompleted As CaptureRegCustImageCompletedEventHandler
        
        '''<remarks/>
        Public Event PostAndCheckEZCashQCompleted As PostAndCheckEZCashQCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyImageCompleted As CopyImageCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureCustImageCompleted As CaptureCustImageCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureCustIDImageCompleted As CaptureCustIDImageCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureCustTxnImageCompleted As CaptureCustTxnImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBarcodeCompleted As GetBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFeeCompleted As GetFeeCompletedEventHandler
        
        '''<remarks/>
        Public Event IsCustomerCompleted As IsCustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadEquinoxScreenCompleted As LoadEquinoxScreenCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckScannerCmdCompleted As CheckScannerCmdCompletedEventHandler
        
        '''<remarks/>
        Public Event ScanBillStubCompleted As ScanBillStubCompletedEventHandler
        
        '''<remarks/>
        Public Event NCRCheckReviewCompleted As NCRCheckReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event NCRCheckVerificationCompleted As NCRCheckVerificationCompletedEventHandler
        
        '''<remarks/>
        Public Event LogBackoutEventCompleted As LogBackoutEventCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessBackoutEventsCompleted As ProcessBackoutEventsCompletedEventHandler
        
        '''<remarks/>
        Public Event TraceCompleted As TraceCompletedEventHandler
        
        '''<remarks/>
        Public Event ParseMICRCompleted As ParseMICRCompletedEventHandler
        
        '''<remarks/>
        Public Event ReverseCheckImagesCompleted As ReverseCheckImagesCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthenticateUserCompleted As AuthenticateUserCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#AuthorizeCheck", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function AuthorizeCheck(ByVal CustomerID As Integer, ByVal TranNbr As Integer, ByVal BlockID As Integer, ByVal ReasonCode As Integer, ByVal AuthCode As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> TCheckAuthorization
            Dim results() As Object = Me.Invoke("AuthorizeCheck", New Object() {CustomerID, TranNbr, BlockID, ReasonCode, AuthCode})
            Return CType(results(0),TCheckAuthorization)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthorizeCheckAsync(ByVal CustomerID As Integer, ByVal TranNbr As Integer, ByVal BlockID As Integer, ByVal ReasonCode As Integer, ByVal AuthCode As Integer)
            Me.AuthorizeCheckAsync(CustomerID, TranNbr, BlockID, ReasonCode, AuthCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthorizeCheckAsync(ByVal CustomerID As Integer, ByVal TranNbr As Integer, ByVal BlockID As Integer, ByVal ReasonCode As Integer, ByVal AuthCode As Integer, ByVal userState As Object)
            If (Me.AuthorizeCheckOperationCompleted Is Nothing) Then
                Me.AuthorizeCheckOperationCompleted = AddressOf Me.OnAuthorizeCheckOperationCompleted
            End If
            Me.InvokeAsync("AuthorizeCheck", New Object() {CustomerID, TranNbr, BlockID, ReasonCode, AuthCode}, Me.AuthorizeCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthorizeCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthorizeCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthorizeCheckCompleted(Me, New AuthorizeCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CreateCustomerID", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CreateCustomerID(ByVal SSN As String, ByVal PhotoIDNo As Integer, ByVal Fname As String, ByVal LastName As String, ByVal LangCode As String) As <System.Xml.Serialization.SoapElementAttribute("return")> TCustInfo
            Dim results() As Object = Me.Invoke("CreateCustomerID", New Object() {SSN, PhotoIDNo, Fname, LastName, LangCode})
            Return CType(results(0),TCustInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateCustomerIDAsync(ByVal SSN As String, ByVal PhotoIDNo As Integer, ByVal Fname As String, ByVal LastName As String, ByVal LangCode As String)
            Me.CreateCustomerIDAsync(SSN, PhotoIDNo, Fname, LastName, LangCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCustomerIDAsync(ByVal SSN As String, ByVal PhotoIDNo As Integer, ByVal Fname As String, ByVal LastName As String, ByVal LangCode As String, ByVal userState As Object)
            If (Me.CreateCustomerIDOperationCompleted Is Nothing) Then
                Me.CreateCustomerIDOperationCompleted = AddressOf Me.OnCreateCustomerIDOperationCompleted
            End If
            Me.InvokeAsync("CreateCustomerID", New Object() {SSN, PhotoIDNo, Fname, LastName, LangCode}, Me.CreateCustomerIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCustomerIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCustomerIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCustomerIDCompleted(Me, New CreateCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CreateTransactionNumber", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CreateTransactionNumber(ByVal CustomerID As Integer, ByVal TranType As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("CreateTransactionNumber", New Object() {CustomerID, TranType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateTransactionNumberAsync(ByVal CustomerID As Integer, ByVal TranType As Integer)
            Me.CreateTransactionNumberAsync(CustomerID, TranType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateTransactionNumberAsync(ByVal CustomerID As Integer, ByVal TranType As Integer, ByVal userState As Object)
            If (Me.CreateTransactionNumberOperationCompleted Is Nothing) Then
                Me.CreateTransactionNumberOperationCompleted = AddressOf Me.OnCreateTransactionNumberOperationCompleted
            End If
            Me.InvokeAsync("CreateTransactionNumber", New Object() {CustomerID, TranType}, Me.CreateTransactionNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateTransactionNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateTransactionNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateTransactionNumberCompleted(Me, New CreateTransactionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#SaveCustomerData", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function SaveCustomerData(ByVal CustomerID As Integer, ByVal PhotoIDNbr As Integer, ByVal Fname As String, ByVal LName As String, ByVal SSN As String, ByVal State As String, ByVal Address As String, ByVal CustomerPhoneNbr As String, ByVal DOB As Date) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("SaveCustomerData", New Object() {CustomerID, PhotoIDNbr, Fname, LName, SSN, State, Address, CustomerPhoneNbr, DOB})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCustomerDataAsync(ByVal CustomerID As Integer, ByVal PhotoIDNbr As Integer, ByVal Fname As String, ByVal LName As String, ByVal SSN As String, ByVal State As String, ByVal Address As String, ByVal CustomerPhoneNbr As String, ByVal DOB As Date)
            Me.SaveCustomerDataAsync(CustomerID, PhotoIDNbr, Fname, LName, SSN, State, Address, CustomerPhoneNbr, DOB, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCustomerDataAsync(ByVal CustomerID As Integer, ByVal PhotoIDNbr As Integer, ByVal Fname As String, ByVal LName As String, ByVal SSN As String, ByVal State As String, ByVal Address As String, ByVal CustomerPhoneNbr As String, ByVal DOB As Date, ByVal userState As Object)
            If (Me.SaveCustomerDataOperationCompleted Is Nothing) Then
                Me.SaveCustomerDataOperationCompleted = AddressOf Me.OnSaveCustomerDataOperationCompleted
            End If
            Me.InvokeAsync("SaveCustomerData", New Object() {CustomerID, PhotoIDNbr, Fname, LName, SSN, State, Address, CustomerPhoneNbr, DOB}, Me.SaveCustomerDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCustomerDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCustomerDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCustomerDataCompleted(Me, New SaveCustomerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#SaveJournalData", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function SaveJournalData(ByVal CustomerID As Integer, ByVal TranNbr As Integer, ByVal EvtCde As Integer, ByVal JournalData As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("SaveJournalData", New Object() {CustomerID, TranNbr, EvtCde, JournalData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveJournalDataAsync(ByVal CustomerID As Integer, ByVal TranNbr As Integer, ByVal EvtCde As Integer, ByVal JournalData As String)
            Me.SaveJournalDataAsync(CustomerID, TranNbr, EvtCde, JournalData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveJournalDataAsync(ByVal CustomerID As Integer, ByVal TranNbr As Integer, ByVal EvtCde As Integer, ByVal JournalData As String, ByVal userState As Object)
            If (Me.SaveJournalDataOperationCompleted Is Nothing) Then
                Me.SaveJournalDataOperationCompleted = AddressOf Me.OnSaveJournalDataOperationCompleted
            End If
            Me.InvokeAsync("SaveJournalData", New Object() {CustomerID, TranNbr, EvtCde, JournalData}, Me.SaveJournalDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveJournalDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveJournalDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveJournalDataCompleted(Me, New SaveJournalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#GetLanguageArray", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function GetLanguageArray(ByVal LangID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> TLangResult
            Dim results() As Object = Me.Invoke("GetLanguageArray", New Object() {LangID})
            Return CType(results(0),TLangResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLanguageArrayAsync(ByVal LangID As Integer)
            Me.GetLanguageArrayAsync(LangID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLanguageArrayAsync(ByVal LangID As Integer, ByVal userState As Object)
            If (Me.GetLanguageArrayOperationCompleted Is Nothing) Then
                Me.GetLanguageArrayOperationCompleted = AddressOf Me.OnGetLanguageArrayOperationCompleted
            End If
            Me.InvokeAsync("GetLanguageArray", New Object() {LangID}, Me.GetLanguageArrayOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLanguageArrayOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLanguageArrayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLanguageArrayCompleted(Me, New GetLanguageArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#GetLanguageArrayStr", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function GetLanguageArrayStr(ByVal LangID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
            Dim results() As Object = Me.Invoke("GetLanguageArrayStr", New Object() {LangID})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLanguageArrayStrAsync(ByVal LangID As Integer)
            Me.GetLanguageArrayStrAsync(LangID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLanguageArrayStrAsync(ByVal LangID As Integer, ByVal userState As Object)
            If (Me.GetLanguageArrayStrOperationCompleted Is Nothing) Then
                Me.GetLanguageArrayStrOperationCompleted = AddressOf Me.OnGetLanguageArrayStrOperationCompleted
            End If
            Me.InvokeAsync("GetLanguageArrayStr", New Object() {LangID}, Me.GetLanguageArrayStrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLanguageArrayStrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLanguageArrayStrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLanguageArrayStrCompleted(Me, New GetLanguageArrayStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureRegIDData", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureRegIDData(ByVal WorkstationID As Integer, ByVal TranType As String, ByVal PAN As String, ByRef ScanID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureRegIDData", New Object() {WorkstationID, TranType, PAN, ScanID})
            ScanID = CType(results(1),Integer)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureRegIDDataAsync(ByVal WorkstationID As Integer, ByVal TranType As String, ByVal PAN As String, ByVal ScanID As Integer)
            Me.CaptureRegIDDataAsync(WorkstationID, TranType, PAN, ScanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureRegIDDataAsync(ByVal WorkstationID As Integer, ByVal TranType As String, ByVal PAN As String, ByVal ScanID As Integer, ByVal userState As Object)
            If (Me.CaptureRegIDDataOperationCompleted Is Nothing) Then
                Me.CaptureRegIDDataOperationCompleted = AddressOf Me.OnCaptureRegIDDataOperationCompleted
            End If
            Me.InvokeAsync("CaptureRegIDData", New Object() {WorkstationID, TranType, PAN, ScanID}, Me.CaptureRegIDDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureRegIDDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureRegIDDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureRegIDDataCompleted(Me, New CaptureRegIDDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureRegIDImage", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureRegIDImage(ByVal WorkstationID As Integer, ByVal ScanID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureRegIDImage", New Object() {WorkstationID, ScanID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureRegIDImageAsync(ByVal WorkstationID As Integer, ByVal ScanID As Integer)
            Me.CaptureRegIDImageAsync(WorkstationID, ScanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureRegIDImageAsync(ByVal WorkstationID As Integer, ByVal ScanID As Integer, ByVal userState As Object)
            If (Me.CaptureRegIDImageOperationCompleted Is Nothing) Then
                Me.CaptureRegIDImageOperationCompleted = AddressOf Me.OnCaptureRegIDImageOperationCompleted
            End If
            Me.InvokeAsync("CaptureRegIDImage", New Object() {WorkstationID, ScanID}, Me.CaptureRegIDImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureRegIDImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureRegIDImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureRegIDImageCompleted(Me, New CaptureRegIDImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureRegIDDataAndImg", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureRegIDDataAndImg(ByVal WorkstationID As Integer, ByVal TranType As String, ByVal PAN As String, ByRef ScanID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureRegIDDataAndImg", New Object() {WorkstationID, TranType, PAN, ScanID})
            ScanID = CType(results(1),Integer)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureRegIDDataAndImgAsync(ByVal WorkstationID As Integer, ByVal TranType As String, ByVal PAN As String, ByVal ScanID As Integer)
            Me.CaptureRegIDDataAndImgAsync(WorkstationID, TranType, PAN, ScanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureRegIDDataAndImgAsync(ByVal WorkstationID As Integer, ByVal TranType As String, ByVal PAN As String, ByVal ScanID As Integer, ByVal userState As Object)
            If (Me.CaptureRegIDDataAndImgOperationCompleted Is Nothing) Then
                Me.CaptureRegIDDataAndImgOperationCompleted = AddressOf Me.OnCaptureRegIDDataAndImgOperationCompleted
            End If
            Me.InvokeAsync("CaptureRegIDDataAndImg", New Object() {WorkstationID, TranType, PAN, ScanID}, Me.CaptureRegIDDataAndImgOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureRegIDDataAndImgOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureRegIDDataAndImgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureRegIDDataAndImgCompleted(Me, New CaptureRegIDDataAndImgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureRegCustImage", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureRegCustImage(ByVal WorkstationID As Integer, ByVal ScanID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureRegCustImage", New Object() {WorkstationID, ScanID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureRegCustImageAsync(ByVal WorkstationID As Integer, ByVal ScanID As Integer)
            Me.CaptureRegCustImageAsync(WorkstationID, ScanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureRegCustImageAsync(ByVal WorkstationID As Integer, ByVal ScanID As Integer, ByVal userState As Object)
            If (Me.CaptureRegCustImageOperationCompleted Is Nothing) Then
                Me.CaptureRegCustImageOperationCompleted = AddressOf Me.OnCaptureRegCustImageOperationCompleted
            End If
            Me.InvokeAsync("CaptureRegCustImage", New Object() {WorkstationID, ScanID}, Me.CaptureRegCustImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureRegCustImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureRegCustImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureRegCustImageCompleted(Me, New CaptureRegCustImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#PostAndCheckEZCashQ", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function PostAndCheckEZCashQ( _
                    ByRef QueueID As Integer,  _
                    ByVal ProviderID As String,  _
                    ByRef WorkstationID As Integer,  _
                    ByRef CustomerID As Integer,  _
                    ByRef QueueCode As String,  _
                    ByRef StatusCode As String,  _
                    ByRef Data1 As String,  _
                    ByRef Data2 As String,  _
                    ByRef Data3 As String,  _
                    ByRef Data4 As String,  _
                    ByRef Data5 As String,  _
                    ByRef Data6 As String,  _
                    ByRef RC1 As String,  _
                    ByRef RC2 As String,  _
                    ByRef RC3 As String,  _
                    ByRef RC4 As String,  _
                    ByVal TimeoutSec As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("PostAndCheckEZCashQ", New Object() {QueueID, ProviderID, WorkstationID, CustomerID, QueueCode, StatusCode, Data1, Data2, Data3, Data4, Data5, Data6, RC1, RC2, RC3, RC4, TimeoutSec})
            QueueID = CType(results(1),Integer)
            WorkstationID = CType(results(2),Integer)
            CustomerID = CType(results(3),Integer)
            QueueCode = CType(results(4),String)
            StatusCode = CType(results(5),String)
            Data1 = CType(results(6),String)
            Data2 = CType(results(7),String)
            Data3 = CType(results(8),String)
            Data4 = CType(results(9),String)
            Data5 = CType(results(10),String)
            Data6 = CType(results(11),String)
            RC1 = CType(results(12),String)
            RC2 = CType(results(13),String)
            RC3 = CType(results(14),String)
            RC4 = CType(results(15),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostAndCheckEZCashQAsync( _
                    ByVal QueueID As Integer,  _
                    ByVal ProviderID As String,  _
                    ByVal WorkstationID As Integer,  _
                    ByVal CustomerID As Integer,  _
                    ByVal QueueCode As String,  _
                    ByVal StatusCode As String,  _
                    ByVal Data1 As String,  _
                    ByVal Data2 As String,  _
                    ByVal Data3 As String,  _
                    ByVal Data4 As String,  _
                    ByVal Data5 As String,  _
                    ByVal Data6 As String,  _
                    ByVal RC1 As String,  _
                    ByVal RC2 As String,  _
                    ByVal RC3 As String,  _
                    ByVal RC4 As String,  _
                    ByVal TimeoutSec As Integer)
            Me.PostAndCheckEZCashQAsync(QueueID, ProviderID, WorkstationID, CustomerID, QueueCode, StatusCode, Data1, Data2, Data3, Data4, Data5, Data6, RC1, RC2, RC3, RC4, TimeoutSec, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostAndCheckEZCashQAsync( _
                    ByVal QueueID As Integer,  _
                    ByVal ProviderID As String,  _
                    ByVal WorkstationID As Integer,  _
                    ByVal CustomerID As Integer,  _
                    ByVal QueueCode As String,  _
                    ByVal StatusCode As String,  _
                    ByVal Data1 As String,  _
                    ByVal Data2 As String,  _
                    ByVal Data3 As String,  _
                    ByVal Data4 As String,  _
                    ByVal Data5 As String,  _
                    ByVal Data6 As String,  _
                    ByVal RC1 As String,  _
                    ByVal RC2 As String,  _
                    ByVal RC3 As String,  _
                    ByVal RC4 As String,  _
                    ByVal TimeoutSec As Integer,  _
                    ByVal userState As Object)
            If (Me.PostAndCheckEZCashQOperationCompleted Is Nothing) Then
                Me.PostAndCheckEZCashQOperationCompleted = AddressOf Me.OnPostAndCheckEZCashQOperationCompleted
            End If
            Me.InvokeAsync("PostAndCheckEZCashQ", New Object() {QueueID, ProviderID, WorkstationID, CustomerID, QueueCode, StatusCode, Data1, Data2, Data3, Data4, Data5, Data6, RC1, RC2, RC3, RC4, TimeoutSec}, Me.PostAndCheckEZCashQOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostAndCheckEZCashQOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostAndCheckEZCashQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostAndCheckEZCashQCompleted(Me, New PostAndCheckEZCashQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CopyImage", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CopyImage(ByVal WorkstationID As Integer, ByVal ScanID As Integer, ByVal CustID As Integer, ByVal PhotoIDID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CopyImage", New Object() {WorkstationID, ScanID, CustID, PhotoIDID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyImageAsync(ByVal WorkstationID As Integer, ByVal ScanID As Integer, ByVal CustID As Integer, ByVal PhotoIDID As Integer)
            Me.CopyImageAsync(WorkstationID, ScanID, CustID, PhotoIDID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyImageAsync(ByVal WorkstationID As Integer, ByVal ScanID As Integer, ByVal CustID As Integer, ByVal PhotoIDID As Integer, ByVal userState As Object)
            If (Me.CopyImageOperationCompleted Is Nothing) Then
                Me.CopyImageOperationCompleted = AddressOf Me.OnCopyImageOperationCompleted
            End If
            Me.InvokeAsync("CopyImage", New Object() {WorkstationID, ScanID, CustID, PhotoIDID}, Me.CopyImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyImageCompleted(Me, New CopyImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureCustImage", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureCustImage(ByVal CustomerID As Integer, ByVal BlockID As Integer, ByVal WorkstationID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureCustImage", New Object() {CustomerID, BlockID, WorkstationID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureCustImageAsync(ByVal CustomerID As Integer, ByVal BlockID As Integer, ByVal WorkstationID As Integer)
            Me.CaptureCustImageAsync(CustomerID, BlockID, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureCustImageAsync(ByVal CustomerID As Integer, ByVal BlockID As Integer, ByVal WorkstationID As Integer, ByVal userState As Object)
            If (Me.CaptureCustImageOperationCompleted Is Nothing) Then
                Me.CaptureCustImageOperationCompleted = AddressOf Me.OnCaptureCustImageOperationCompleted
            End If
            Me.InvokeAsync("CaptureCustImage", New Object() {CustomerID, BlockID, WorkstationID}, Me.CaptureCustImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureCustImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureCustImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureCustImageCompleted(Me, New CaptureCustImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureCustIDImage", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureCustIDImage(ByVal CustomerID As Integer, ByVal BlockID As Integer, ByVal WorkstationID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureCustIDImage", New Object() {CustomerID, BlockID, WorkstationID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureCustIDImageAsync(ByVal CustomerID As Integer, ByVal BlockID As Integer, ByVal WorkstationID As Integer)
            Me.CaptureCustIDImageAsync(CustomerID, BlockID, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureCustIDImageAsync(ByVal CustomerID As Integer, ByVal BlockID As Integer, ByVal WorkstationID As Integer, ByVal userState As Object)
            If (Me.CaptureCustIDImageOperationCompleted Is Nothing) Then
                Me.CaptureCustIDImageOperationCompleted = AddressOf Me.OnCaptureCustIDImageOperationCompleted
            End If
            Me.InvokeAsync("CaptureCustIDImage", New Object() {CustomerID, BlockID, WorkstationID}, Me.CaptureCustIDImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureCustIDImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureCustIDImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureCustIDImageCompleted(Me, New CaptureCustIDImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CaptureCustTxnImage", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CaptureCustTxnImage(ByVal CustomerID As Integer, ByVal TranID As Integer, ByVal WorkstationID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CaptureCustTxnImage", New Object() {CustomerID, TranID, WorkstationID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureCustTxnImageAsync(ByVal CustomerID As Integer, ByVal TranID As Integer, ByVal WorkstationID As Integer)
            Me.CaptureCustTxnImageAsync(CustomerID, TranID, WorkstationID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureCustTxnImageAsync(ByVal CustomerID As Integer, ByVal TranID As Integer, ByVal WorkstationID As Integer, ByVal userState As Object)
            If (Me.CaptureCustTxnImageOperationCompleted Is Nothing) Then
                Me.CaptureCustTxnImageOperationCompleted = AddressOf Me.OnCaptureCustTxnImageOperationCompleted
            End If
            Me.InvokeAsync("CaptureCustTxnImage", New Object() {CustomerID, TranID, WorkstationID}, Me.CaptureCustTxnImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureCustTxnImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureCustTxnImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureCustTxnImageCompleted(Me, New CaptureCustTxnImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#GetBarcode", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function GetBarcode(ByVal WorkstationID As Integer, ByVal ReceiptNbr As Integer, ByVal ProviderID As String, ByVal NetCash As Double, ByRef Barcode As String, ByRef ErrorDesc As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("GetBarcode", New Object() {WorkstationID, ReceiptNbr, ProviderID, NetCash, Barcode, ErrorDesc})
            Barcode = CType(results(1),String)
            ErrorDesc = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBarcodeAsync(ByVal WorkstationID As Integer, ByVal ReceiptNbr As Integer, ByVal ProviderID As String, ByVal NetCash As Double, ByVal Barcode As String, ByVal ErrorDesc As String)
            Me.GetBarcodeAsync(WorkstationID, ReceiptNbr, ProviderID, NetCash, Barcode, ErrorDesc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBarcodeAsync(ByVal WorkstationID As Integer, ByVal ReceiptNbr As Integer, ByVal ProviderID As String, ByVal NetCash As Double, ByVal Barcode As String, ByVal ErrorDesc As String, ByVal userState As Object)
            If (Me.GetBarcodeOperationCompleted Is Nothing) Then
                Me.GetBarcodeOperationCompleted = AddressOf Me.OnGetBarcodeOperationCompleted
            End If
            Me.InvokeAsync("GetBarcode", New Object() {WorkstationID, ReceiptNbr, ProviderID, NetCash, Barcode, ErrorDesc}, Me.GetBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBarcodeCompleted(Me, New GetBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#GetFee", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Sub GetFee(ByVal WorkstationID As Integer, ByVal CustomerID As Integer, ByVal Amount As Double, ByVal TranType As String, ByVal ProcessorID As Integer, ByRef Fee As Double, ByRef RC1 As String, ByRef RC2 As String, ByVal DevID As Integer, ByVal CardID As Integer)
            Dim results() As Object = Me.Invoke("GetFee", New Object() {WorkstationID, CustomerID, Amount, TranType, ProcessorID, Fee, RC1, RC2, DevID, CardID})
            Fee = CType(results(0),Double)
            RC1 = CType(results(1),String)
            RC2 = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFeeAsync(ByVal WorkstationID As Integer, ByVal CustomerID As Integer, ByVal Amount As Double, ByVal TranType As String, ByVal ProcessorID As Integer, ByVal Fee As Double, ByVal RC1 As String, ByVal RC2 As String, ByVal DevID As Integer, ByVal CardID As Integer)
            Me.GetFeeAsync(WorkstationID, CustomerID, Amount, TranType, ProcessorID, Fee, RC1, RC2, DevID, CardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFeeAsync(ByVal WorkstationID As Integer, ByVal CustomerID As Integer, ByVal Amount As Double, ByVal TranType As String, ByVal ProcessorID As Integer, ByVal Fee As Double, ByVal RC1 As String, ByVal RC2 As String, ByVal DevID As Integer, ByVal CardID As Integer, ByVal userState As Object)
            If (Me.GetFeeOperationCompleted Is Nothing) Then
                Me.GetFeeOperationCompleted = AddressOf Me.OnGetFeeOperationCompleted
            End If
            Me.InvokeAsync("GetFee", New Object() {WorkstationID, CustomerID, Amount, TranType, ProcessorID, Fee, RC1, RC2, DevID, CardID}, Me.GetFeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFeeCompleted(Me, New GetFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#IsCustomer", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function IsCustomer(ByVal IDNbr As String, ByVal DOB As String, ByVal State As String, ByRef Fname As String, ByRef LName As String, ByRef RC1 As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("IsCustomer", New Object() {IDNbr, DOB, State, Fname, LName, RC1})
            Fname = CType(results(1),String)
            LName = CType(results(2),String)
            RC1 = CType(results(3),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsCustomerAsync(ByVal IDNbr As String, ByVal DOB As String, ByVal State As String, ByVal Fname As String, ByVal LName As String, ByVal RC1 As Integer)
            Me.IsCustomerAsync(IDNbr, DOB, State, Fname, LName, RC1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsCustomerAsync(ByVal IDNbr As String, ByVal DOB As String, ByVal State As String, ByVal Fname As String, ByVal LName As String, ByVal RC1 As Integer, ByVal userState As Object)
            If (Me.IsCustomerOperationCompleted Is Nothing) Then
                Me.IsCustomerOperationCompleted = AddressOf Me.OnIsCustomerOperationCompleted
            End If
            Me.InvokeAsync("IsCustomer", New Object() {IDNbr, DOB, State, Fname, LName, RC1}, Me.IsCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsCustomerCompleted(Me, New IsCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#LoadEquinoxScreen", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function LoadEquinoxScreen(ByVal WorkstationID As Integer, ByVal LanguageID As Integer, ByVal TemplateID As String, ByVal PINflag As Integer, ByVal WaitForInput As Integer, ByVal TimeoutSec As Integer, ByVal ReturnToIdleSec As Integer, ByVal PAN As String, ByVal Info() As String, ByRef PIN As String, ByRef KSN As String, ByRef UserInput As String, ByRef ButtonPressed As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("LoadEquinoxScreen", New Object() {WorkstationID, LanguageID, TemplateID, PINflag, WaitForInput, TimeoutSec, ReturnToIdleSec, PAN, Info, PIN, KSN, UserInput, ButtonPressed})
            PIN = CType(results(1),String)
            KSN = CType(results(2),String)
            UserInput = CType(results(3),String)
            ButtonPressed = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadEquinoxScreenAsync(ByVal WorkstationID As Integer, ByVal LanguageID As Integer, ByVal TemplateID As String, ByVal PINflag As Integer, ByVal WaitForInput As Integer, ByVal TimeoutSec As Integer, ByVal ReturnToIdleSec As Integer, ByVal PAN As String, ByVal Info() As String, ByVal PIN As String, ByVal KSN As String, ByVal UserInput As String, ByVal ButtonPressed As String)
            Me.LoadEquinoxScreenAsync(WorkstationID, LanguageID, TemplateID, PINflag, WaitForInput, TimeoutSec, ReturnToIdleSec, PAN, Info, PIN, KSN, UserInput, ButtonPressed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadEquinoxScreenAsync(ByVal WorkstationID As Integer, ByVal LanguageID As Integer, ByVal TemplateID As String, ByVal PINflag As Integer, ByVal WaitForInput As Integer, ByVal TimeoutSec As Integer, ByVal ReturnToIdleSec As Integer, ByVal PAN As String, ByVal Info() As String, ByVal PIN As String, ByVal KSN As String, ByVal UserInput As String, ByVal ButtonPressed As String, ByVal userState As Object)
            If (Me.LoadEquinoxScreenOperationCompleted Is Nothing) Then
                Me.LoadEquinoxScreenOperationCompleted = AddressOf Me.OnLoadEquinoxScreenOperationCompleted
            End If
            Me.InvokeAsync("LoadEquinoxScreen", New Object() {WorkstationID, LanguageID, TemplateID, PINflag, WaitForInput, TimeoutSec, ReturnToIdleSec, PAN, Info, PIN, KSN, UserInput, ButtonPressed}, Me.LoadEquinoxScreenOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadEquinoxScreenOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadEquinoxScreenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadEquinoxScreenCompleted(Me, New LoadEquinoxScreenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#CheckScannerCmd", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function CheckScannerCmd(ByVal Command As String, ByRef MICR As String, ByVal WorkstationID As Integer, ByVal TranID As Integer, ByVal CustID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("CheckScannerCmd", New Object() {Command, MICR, WorkstationID, TranID, CustID})
            MICR = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckScannerCmdAsync(ByVal Command As String, ByVal MICR As String, ByVal WorkstationID As Integer, ByVal TranID As Integer, ByVal CustID As Integer)
            Me.CheckScannerCmdAsync(Command, MICR, WorkstationID, TranID, CustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckScannerCmdAsync(ByVal Command As String, ByVal MICR As String, ByVal WorkstationID As Integer, ByVal TranID As Integer, ByVal CustID As Integer, ByVal userState As Object)
            If (Me.CheckScannerCmdOperationCompleted Is Nothing) Then
                Me.CheckScannerCmdOperationCompleted = AddressOf Me.OnCheckScannerCmdOperationCompleted
            End If
            Me.InvokeAsync("CheckScannerCmd", New Object() {Command, MICR, WorkstationID, TranID, CustID}, Me.CheckScannerCmdOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckScannerCmdOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckScannerCmdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckScannerCmdCompleted(Me, New CheckScannerCmdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#ScanBillStub", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function ScanBillStub(ByVal WorkstationID As Integer, ByVal BillPayReviewID As Integer, ByVal CustID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("ScanBillStub", New Object() {WorkstationID, BillPayReviewID, CustID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ScanBillStubAsync(ByVal WorkstationID As Integer, ByVal BillPayReviewID As Integer, ByVal CustID As Integer)
            Me.ScanBillStubAsync(WorkstationID, BillPayReviewID, CustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ScanBillStubAsync(ByVal WorkstationID As Integer, ByVal BillPayReviewID As Integer, ByVal CustID As Integer, ByVal userState As Object)
            If (Me.ScanBillStubOperationCompleted Is Nothing) Then
                Me.ScanBillStubOperationCompleted = AddressOf Me.OnScanBillStubOperationCompleted
            End If
            Me.InvokeAsync("ScanBillStub", New Object() {WorkstationID, BillPayReviewID, CustID}, Me.ScanBillStubOperationCompleted, userState)
        End Sub
        
        Private Sub OnScanBillStubOperationCompleted(ByVal arg As Object)
            If (Not (Me.ScanBillStubCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ScanBillStubCompleted(Me, New ScanBillStubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#NCRCheckReview", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Sub NCRCheckReview(ByVal PAN As String, <System.Xml.Serialization.SoapElementAttribute(DataType:="base64Binary")> ByVal FrontImageJPG() As Byte, <System.Xml.Serialization.SoapElementAttribute(DataType:="base64Binary")> ByVal BackImageJPG() As Byte, ByVal RTN As String, ByVal AcctNbr As String, ByVal CheckNbr As String, ByVal Amount As String, ByVal [Date] As String, ByRef TerminateFlag As Integer, ByRef MakerPhoneFlag As Integer, ByRef CheckSignedFlag As Integer, ByRef AvailBal As Double, ByRef CardBal As Double, ByRef Fee As Double, ByRef RequestID As Integer)
            Dim results() As Object = Me.Invoke("NCRCheckReview", New Object() {PAN, FrontImageJPG, BackImageJPG, RTN, AcctNbr, CheckNbr, Amount, [Date], TerminateFlag, MakerPhoneFlag, CheckSignedFlag, AvailBal, CardBal, Fee, RequestID})
            TerminateFlag = CType(results(0),Integer)
            MakerPhoneFlag = CType(results(1),Integer)
            CheckSignedFlag = CType(results(2),Integer)
            AvailBal = CType(results(3),Double)
            CardBal = CType(results(4),Double)
            Fee = CType(results(5),Double)
            RequestID = CType(results(6),Integer)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NCRCheckReviewAsync(ByVal PAN As String, ByVal FrontImageJPG() As Byte, ByVal BackImageJPG() As Byte, ByVal RTN As String, ByVal AcctNbr As String, ByVal CheckNbr As String, ByVal Amount As String, ByVal [Date] As String, ByVal TerminateFlag As Integer, ByVal MakerPhoneFlag As Integer, ByVal CheckSignedFlag As Integer, ByVal AvailBal As Double, ByVal CardBal As Double, ByVal Fee As Double, ByVal RequestID As Integer)
            Me.NCRCheckReviewAsync(PAN, FrontImageJPG, BackImageJPG, RTN, AcctNbr, CheckNbr, Amount, [Date], TerminateFlag, MakerPhoneFlag, CheckSignedFlag, AvailBal, CardBal, Fee, RequestID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NCRCheckReviewAsync( _
                    ByVal PAN As String,  _
                    ByVal FrontImageJPG() As Byte,  _
                    ByVal BackImageJPG() As Byte,  _
                    ByVal RTN As String,  _
                    ByVal AcctNbr As String,  _
                    ByVal CheckNbr As String,  _
                    ByVal Amount As String,  _
                    ByVal [Date] As String,  _
                    ByVal TerminateFlag As Integer,  _
                    ByVal MakerPhoneFlag As Integer,  _
                    ByVal CheckSignedFlag As Integer,  _
                    ByVal AvailBal As Double,  _
                    ByVal CardBal As Double,  _
                    ByVal Fee As Double,  _
                    ByVal RequestID As Integer,  _
                    ByVal userState As Object)
            If (Me.NCRCheckReviewOperationCompleted Is Nothing) Then
                Me.NCRCheckReviewOperationCompleted = AddressOf Me.OnNCRCheckReviewOperationCompleted
            End If
            Me.InvokeAsync("NCRCheckReview", New Object() {PAN, FrontImageJPG, BackImageJPG, RTN, AcctNbr, CheckNbr, Amount, [Date], TerminateFlag, MakerPhoneFlag, CheckSignedFlag, AvailBal, CardBal, Fee, RequestID}, Me.NCRCheckReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnNCRCheckReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.NCRCheckReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NCRCheckReviewCompleted(Me, New NCRCheckReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#NCRCheckVerification", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Sub NCRCheckVerification(ByVal MakerPhone As String, ByRef CheckOK As String, ByRef AvailBal As Double, ByRef CardBal As Double, ByRef CashOnly As Integer, ByRef RequestID As Integer, ByRef MobilePhone As String)
            Dim results() As Object = Me.Invoke("NCRCheckVerification", New Object() {MakerPhone, CheckOK, AvailBal, CardBal, CashOnly, RequestID, MobilePhone})
            CheckOK = CType(results(0),String)
            AvailBal = CType(results(1),Double)
            CardBal = CType(results(2),Double)
            CashOnly = CType(results(3),Integer)
            RequestID = CType(results(4),Integer)
            MobilePhone = CType(results(5),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NCRCheckVerificationAsync(ByVal MakerPhone As String, ByVal CheckOK As String, ByVal AvailBal As Double, ByVal CardBal As Double, ByVal CashOnly As Integer, ByVal RequestID As Integer, ByVal MobilePhone As String)
            Me.NCRCheckVerificationAsync(MakerPhone, CheckOK, AvailBal, CardBal, CashOnly, RequestID, MobilePhone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NCRCheckVerificationAsync(ByVal MakerPhone As String, ByVal CheckOK As String, ByVal AvailBal As Double, ByVal CardBal As Double, ByVal CashOnly As Integer, ByVal RequestID As Integer, ByVal MobilePhone As String, ByVal userState As Object)
            If (Me.NCRCheckVerificationOperationCompleted Is Nothing) Then
                Me.NCRCheckVerificationOperationCompleted = AddressOf Me.OnNCRCheckVerificationOperationCompleted
            End If
            Me.InvokeAsync("NCRCheckVerification", New Object() {MakerPhone, CheckOK, AvailBal, CardBal, CashOnly, RequestID, MobilePhone}, Me.NCRCheckVerificationOperationCompleted, userState)
        End Sub
        
        Private Sub OnNCRCheckVerificationOperationCompleted(ByVal arg As Object)
            If (Not (Me.NCRCheckVerificationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NCRCheckVerificationCompleted(Me, New NCRCheckVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#LogBackoutEvent", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function LogBackoutEvent(ByRef BackoutID As Integer, ByVal KeyName As String, ByVal KeyValue As String, ByVal Tablename As String, ByVal FieldName As String, ByVal Database As String, ByVal Operation As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("LogBackoutEvent", New Object() {BackoutID, KeyName, KeyValue, Tablename, FieldName, Database, Operation})
            BackoutID = CType(results(1),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogBackoutEventAsync(ByVal BackoutID As Integer, ByVal KeyName As String, ByVal KeyValue As String, ByVal Tablename As String, ByVal FieldName As String, ByVal Database As String, ByVal Operation As Integer)
            Me.LogBackoutEventAsync(BackoutID, KeyName, KeyValue, Tablename, FieldName, Database, Operation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogBackoutEventAsync(ByVal BackoutID As Integer, ByVal KeyName As String, ByVal KeyValue As String, ByVal Tablename As String, ByVal FieldName As String, ByVal Database As String, ByVal Operation As Integer, ByVal userState As Object)
            If (Me.LogBackoutEventOperationCompleted Is Nothing) Then
                Me.LogBackoutEventOperationCompleted = AddressOf Me.OnLogBackoutEventOperationCompleted
            End If
            Me.InvokeAsync("LogBackoutEvent", New Object() {BackoutID, KeyName, KeyValue, Tablename, FieldName, Database, Operation}, Me.LogBackoutEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogBackoutEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogBackoutEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogBackoutEventCompleted(Me, New LogBackoutEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#ProcessBackoutEvents", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function ProcessBackoutEvents(ByVal BackoutID As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("ProcessBackoutEvents", New Object() {BackoutID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessBackoutEventsAsync(ByVal BackoutID As Integer)
            Me.ProcessBackoutEventsAsync(BackoutID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessBackoutEventsAsync(ByVal BackoutID As Integer, ByVal userState As Object)
            If (Me.ProcessBackoutEventsOperationCompleted Is Nothing) Then
                Me.ProcessBackoutEventsOperationCompleted = AddressOf Me.OnProcessBackoutEventsOperationCompleted
            End If
            Me.InvokeAsync("ProcessBackoutEvents", New Object() {BackoutID}, Me.ProcessBackoutEventsOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessBackoutEventsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessBackoutEventsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessBackoutEventsCompleted(Me, New ProcessBackoutEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#Trace", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Sub Trace(ByVal Msg As String)
            Me.Invoke("Trace", New Object() {Msg})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TraceAsync(ByVal Msg As String)
            Me.TraceAsync(Msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TraceAsync(ByVal Msg As String, ByVal userState As Object)
            If (Me.TraceOperationCompleted Is Nothing) Then
                Me.TraceOperationCompleted = AddressOf Me.OnTraceOperationCompleted
            End If
            Me.InvokeAsync("Trace", New Object() {Msg}, Me.TraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraceCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#ParseMICR", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Sub ParseMICR(ByVal MICR As String, ByRef CheckNbr As String, ByRef RTN As String, ByRef AcctNbr As String)
            Dim results() As Object = Me.Invoke("ParseMICR", New Object() {MICR, CheckNbr, RTN, AcctNbr})
            CheckNbr = CType(results(0),String)
            RTN = CType(results(1),String)
            AcctNbr = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParseMICRAsync(ByVal MICR As String, ByVal CheckNbr As String, ByVal RTN As String, ByVal AcctNbr As String)
            Me.ParseMICRAsync(MICR, CheckNbr, RTN, AcctNbr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParseMICRAsync(ByVal MICR As String, ByVal CheckNbr As String, ByVal RTN As String, ByVal AcctNbr As String, ByVal userState As Object)
            If (Me.ParseMICROperationCompleted Is Nothing) Then
                Me.ParseMICROperationCompleted = AddressOf Me.OnParseMICROperationCompleted
            End If
            Me.InvokeAsync("ParseMICR", New Object() {MICR, CheckNbr, RTN, AcctNbr}, Me.ParseMICROperationCompleted, userState)
        End Sub
        
        Private Sub OnParseMICROperationCompleted(ByVal arg As Object)
            If (Not (Me.ParseMICRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParseMICRCompleted(Me, New ParseMICRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#ReverseCheckImages", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Sub ReverseCheckImages(ByVal WorkstationID As Integer, ByVal CheckID As Integer)
            Me.Invoke("ReverseCheckImages", New Object() {WorkstationID, CheckID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReverseCheckImagesAsync(ByVal WorkstationID As Integer, ByVal CheckID As Integer)
            Me.ReverseCheckImagesAsync(WorkstationID, CheckID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReverseCheckImagesAsync(ByVal WorkstationID As Integer, ByVal CheckID As Integer, ByVal userState As Object)
            If (Me.ReverseCheckImagesOperationCompleted Is Nothing) Then
                Me.ReverseCheckImagesOperationCompleted = AddressOf Me.OnReverseCheckImagesOperationCompleted
            End If
            Me.InvokeAsync("ReverseCheckImages", New Object() {WorkstationID, CheckID}, Me.ReverseCheckImagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnReverseCheckImagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReverseCheckImagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReverseCheckImagesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:CheckServiceIntf-ICheckService#AuthenticateUser", RequestNamespace:="urn:CheckServiceIntf-ICheckService", ResponseNamespace:="urn:CheckServiceIntf-ICheckService")>  _
        Public Function AuthenticateUser(ByVal VendorID As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("AuthenticateUser", New Object() {VendorID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthenticateUserAsync(ByVal VendorID As String)
            Me.AuthenticateUserAsync(VendorID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthenticateUserAsync(ByVal VendorID As String, ByVal userState As Object)
            If (Me.AuthenticateUserOperationCompleted Is Nothing) Then
                Me.AuthenticateUserOperationCompleted = AddressOf Me.OnAuthenticateUserOperationCompleted
            End If
            Me.InvokeAsync("AuthenticateUser", New Object() {VendorID}, Me.AuthenticateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthenticateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthenticateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthenticateUserCompleted(Me, New AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:CheckServiceIntf")>  _
    Partial Public Class TCheckAuthorization
        
        Private barcodeField As String
        
        Private returnCodeField As Integer
        
        '''<remarks/>
        Public Property Barcode() As String
            Get
                Return Me.barcodeField
            End Get
            Set
                Me.barcodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReturnCode() As Integer
            Get
                Return Me.returnCodeField
            End Get
            Set
                Me.returnCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:CheckServiceIntf")>  _
    Partial Public Class TLangResult
        
        Private objectCountField As Integer
        
        Private objectsField() As TObjName
        
        '''<remarks/>
        Public Property ObjectCount() As Integer
            Get
                Return Me.objectCountField
            End Get
            Set
                Me.objectCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Objects() As TObjName()
            Get
                Return Me.objectsField
            End Get
            Set
                Me.objectsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:CheckServiceIntf")>  _
    Partial Public Class TObjName
        
        Private objectNameField As String
        
        Private objectTextField As String
        
        '''<remarks/>
        Public Property ObjectName() As String
            Get
                Return Me.objectNameField
            End Get
            Set
                Me.objectNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ObjectText() As String
            Get
                Return Me.objectTextField
            End Get
            Set
                Me.objectTextField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:CheckServiceIntf")>  _
    Partial Public Class TCustInfo
        
        Private idField As Integer
        
        Private parentCustomerIDField As Integer
        
        Private user_nameField As String
        
        Private nameFField As String
        
        Private nameLField As String
        
        Private customerIDField As Integer
        
        Private activeField As Boolean
        
        Private createDateField As Date
        
        Private createUserField As String
        
        Private modifiedDateField As Date
        
        Private modifiedUserField As String
        
        Private lockDateField As Date
        
        Private lockUserField As String
        
        Private langIDPrefField As Integer
        
        Private dLNbrField As String
        
        Private sSNField As String
        
        Private dOBField As Date
        
        Private track2DataField As String
        
        Private objectCountField As Integer
        
        Private objectsField() As TObjName
        
        Private returnCodeField As Integer
        
        '''<remarks/>
        Public Property ID() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParentCustomerID() As Integer
            Get
                Return Me.parentCustomerIDField
            End Get
            Set
                Me.parentCustomerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property user_name() As String
            Get
                Return Me.user_nameField
            End Get
            Set
                Me.user_nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameF() As String
            Get
                Return Me.nameFField
            End Get
            Set
                Me.nameFField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameL() As String
            Get
                Return Me.nameLField
            End Get
            Set
                Me.nameLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerID() As Integer
            Get
                Return Me.customerIDField
            End Get
            Set
                Me.customerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As Date
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateUser() As String
            Get
                Return Me.createUserField
            End Get
            Set
                Me.createUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModifiedDate() As Date
            Get
                Return Me.modifiedDateField
            End Get
            Set
                Me.modifiedDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ModifiedUser() As String
            Get
                Return Me.modifiedUserField
            End Get
            Set
                Me.modifiedUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LockDate() As Date
            Get
                Return Me.lockDateField
            End Get
            Set
                Me.lockDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LockUser() As String
            Get
                Return Me.lockUserField
            End Get
            Set
                Me.lockUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LangIDPref() As Integer
            Get
                Return Me.langIDPrefField
            End Get
            Set
                Me.langIDPrefField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DLNbr() As String
            Get
                Return Me.dLNbrField
            End Get
            Set
                Me.dLNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SSN() As String
            Get
                Return Me.sSNField
            End Get
            Set
                Me.sSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DOB() As Date
            Get
                Return Me.dOBField
            End Get
            Set
                Me.dOBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Track2Data() As String
            Get
                Return Me.track2DataField
            End Get
            Set
                Me.track2DataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ObjectCount() As Integer
            Get
                Return Me.objectCountField
            End Get
            Set
                Me.objectCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Objects() As TObjName()
            Get
                Return Me.objectsField
            End Get
            Set
                Me.objectsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReturnCode() As Integer
            Get
                Return Me.returnCodeField
            End Get
            Set
                Me.returnCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AuthorizeCheckCompletedEventHandler(ByVal sender As Object, ByVal e As AuthorizeCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthorizeCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TCheckAuthorization
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TCheckAuthorization)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateCustomerIDCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCustomerIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCustomerIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TCustInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TCustInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateTransactionNumberCompletedEventHandler(ByVal sender As Object, ByVal e As CreateTransactionNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateTransactionNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SaveCustomerDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCustomerDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCustomerDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SaveJournalDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveJournalDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveJournalDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetLanguageArrayCompletedEventHandler(ByVal sender As Object, ByVal e As GetLanguageArrayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLanguageArrayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TLangResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TLangResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetLanguageArrayStrCompletedEventHandler(ByVal sender As Object, ByVal e As GetLanguageArrayStrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLanguageArrayStrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureRegIDDataCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureRegIDDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureRegIDDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ScanID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureRegIDImageCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureRegIDImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureRegIDImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureRegIDDataAndImgCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureRegIDDataAndImgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureRegIDDataAndImgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ScanID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureRegCustImageCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureRegCustImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureRegCustImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub PostAndCheckEZCashQCompletedEventHandler(ByVal sender As Object, ByVal e As PostAndCheckEZCashQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostAndCheckEZCashQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property QueueID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property WorkstationID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CustomerID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property QueueCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property StatusCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data4() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data5() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data6() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(12),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(13),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(14),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC4() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(15),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CopyImageCompletedEventHandler(ByVal sender As Object, ByVal e As CopyImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureCustImageCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureCustImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureCustImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureCustIDImageCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureCustIDImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureCustIDImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CaptureCustTxnImageCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureCustTxnImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureCustTxnImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Barcode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorDesc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetFeeCompletedEventHandler(ByVal sender As Object, ByVal e As GetFeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Fee() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub IsCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As IsCustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsCustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Fname() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property LName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RC1() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub LoadEquinoxScreenCompletedEventHandler(ByVal sender As Object, ByVal e As LoadEquinoxScreenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadEquinoxScreenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PIN() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property KSN() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property UserInput() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ButtonPressed() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CheckScannerCmdCompletedEventHandler(ByVal sender As Object, ByVal e As CheckScannerCmdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckScannerCmdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MICR() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ScanBillStubCompletedEventHandler(ByVal sender As Object, ByVal e As ScanBillStubCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ScanBillStubCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub NCRCheckReviewCompletedEventHandler(ByVal sender As Object, ByVal e As NCRCheckReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NCRCheckReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property TerminateFlag() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MakerPhoneFlag() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CheckSignedFlag() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AvailBal() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CardBal() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Fee() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RequestID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub NCRCheckVerificationCompletedEventHandler(ByVal sender As Object, ByVal e As NCRCheckVerificationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NCRCheckVerificationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property CheckOK() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AvailBal() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CardBal() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CashOnly() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RequestID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MobilePhone() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub LogBackoutEventCompletedEventHandler(ByVal sender As Object, ByVal e As LogBackoutEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogBackoutEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property BackoutID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessBackoutEventsCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessBackoutEventsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessBackoutEventsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub TraceCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ParseMICRCompletedEventHandler(ByVal sender As Object, ByVal e As ParseMICRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParseMICRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property CheckNbr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property RTN() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property AcctNbr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ReverseCheckImagesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AuthenticateUserCompletedEventHandler(ByVal sender As Object, ByVal e As AuthenticateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthenticateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
